<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kotlin academy&#39;s trouble</title>
      <link href="/2018/06/09/kotlin-academy-s-trouble/"/>
      <url>/2018/06/09/kotlin-academy-s-trouble/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin-puzzlers"><a href="#Kotlin-puzzlers" class="headerlink" title="Kotlin puzzlers"></a>Kotlin puzzlers</h1><blockquote><p>话说已经好久没写blog了呢，又是失踪人口回归，我一直觉得不能强迫自己为了写博客而写博客，总是要为了记录点什么才行，这次我就刚好见到kotlin academy发的邮件，瞥了一眼觉得很多易错的题目蛮好(鬼畜)的，就忍不住想写了blog记录一下啦。 <strong>原文地址：<a href="https://kotlin-academy.herokuapp.com/#/">Kotlin Academy</a></strong></p></blockquote><p><strong>以下题目的答案和解析都下一题揭晓啦（学自夜雀 逃。</strong></p><h3 id="Order-of-nullable-operators-（猫王操作符的优先级-重要提示"><a href="#Order-of-nullable-operators-（猫王操作符的优先级-重要提示" class="headerlink" title="Order of nullable operators （猫王操作符的优先级 重要提示"></a>Order of nullable operators （猫王操作符的优先级 <em>重要提示</em></h3><p><strong>Level：Beginner</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> x: <span class="built_in">Int</span>? = <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> y: <span class="built_in">Int</span> = <span class="number">3</span></span><br><span class="line">    <span class="keyword">val</span> sum = x?:<span class="number">0</span> + y</span><br><span class="line"></span><br><span class="line">    println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What will it print ? Some possibilities:</strong> &#x2F;&#x2F;这个不用翻译了吧…</p><p>a. 3</p><p>b. 5</p><p>c. 2</p><p>d. 0</p><blockquote><p>Author: Thomas Nield</p></blockquote><span id="more"></span><hr><h3 id="Contravariance-逆变"><a href="#Contravariance-逆变" class="headerlink" title="Contravariance (逆变)"></a>Contravariance (逆变)</h3><p><strong>Level：Beginner</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Wrapper</span>&lt;<span class="type">in T</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> instanceVariableOne: Wrapper&lt;<span class="built_in">Nothing</span>&gt; = Wrapper&lt;Any&gt;() <span class="comment">//Line A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> instanceVariableTwo: Wrapper&lt;Any&gt; = Wrapper&lt;<span class="built_in">Nothing</span>&gt;() <span class="comment">//Line B</span></span><br></pre></td></tr></table></figure><p><strong>What does it display? Some possibilities:</strong></p><p>a. Both lines A and B compile.</p><p>b. Lines A and B do not compile.</p><p>c. Line A compiles;Line B does not.</p><p>d. Line B compiles;Line A does not.</p><blockquote><p>Author：Allan Caine</p></blockquote><p><strong>上题答案：</strong></p><p>c. 2</p><p><strong>解析：</strong></p><blockquote><p>Elvis operator(猫王操作符，我脑补)，比<code>+</code>具有更低优先级的操作符，所以 <code>+</code>会先被计算，</p><p>即 sum &#x3D; x ?: ( 0 + y) &#x3D; x ?: 3  &#x3D;  2, 使用小括号可以正确计算。</p></blockquote><hr><h3 id="Interface-delegation-and-data-classes"><a href="#Interface-delegation-and-data-classes" class="headerlink" title="Interface delegation and data classes"></a>Interface delegation and data classes</h3><p><strong>Level：Expert</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Container</span>(</span><br><span class="line"><span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> items: List&lt;<span class="built_in">Int</span>&gt;</span><br><span class="line">) : List&lt;<span class="built_in">Int</span>&gt; <span class="keyword">by</span> items</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> (name, items) = Container(<span class="string">&quot;Kotlin&quot;</span>, listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">    println(<span class="string">&quot;Hello <span class="variable">$name</span>, <span class="variable">$items</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>What will it print? Some possibilities:</strong></p><p>a. Hello Kotlin,[1, 2, 3]</p><p>b. Hello Kotlin, 1</p><p>c. Hello 1, 2</p><p>d. Hello Kotlin, 2</p><blockquote><p>Author: Nikolas Havrikov</p></blockquote><p><strong>上题答案：</strong></p><p>c. Line A compiles;Line B does not.</p><p><strong>解析：</strong></p><blockquote><p><code>Wrapper&lt;in T&gt;</code> 中的<code>T</code>是逆变的。 <code>Wrapper </code>的类型应该与<code>T</code>的子类型相反，即 <code>super T</code>。</p><p>因为<code>Nothing</code>是<code>Any</code>的子类型(注:Nothing 是其他所有类型的子类型)，所以<code>Wrapper&lt;Any&gt;</code> 是<code>Wrapper&lt;Nothing&gt;</code>的子类型。</p><p>Line A compiles。他将一个子类型赋值给超类。</p><p>Line B does not compile。 他将一个超类赋值给子类。</p></blockquote><hr><h3 id="WTF-with-labels"><a href="#WTF-with-labels" class="headerlink" title="WTF with labels"></a>WTF with labels</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> j = <span class="symbol">wtf@</span>&#123; n: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        <span class="symbol">wtf@</span>(<span class="symbol">wtf@</span>n + <span class="symbol">wtf@</span><span class="number">2</span>)</span><br><span class="line">    &#125;(<span class="number">10</span>)</span><br><span class="line">    print(j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What does it display? Some possibilities:</strong></p><p>a. It won’t compile</p><p>b. 10</p><p>c. 2</p><p>d. 12</p><blockquote><p>Author: Dmitry Kandaloy</p></blockquote><p><strong>上题答案：</strong></p><p>d. Hello Kotlin, 2</p><p><strong>解析：</strong></p><blockquote><p><code>private val items</code>使<code>Container.component2()</code> 私有化。</p><p><code>public List&lt;T&gt;.component2()</code>定义在kotlin-stdlib中的扩展函数。</p><p><code>Container</code>用by delegation的方式实现了接口<code>List&lt;Int&gt;</code>，因此调用了上面的扩展函数。</p><p>所以，(name, items)解构后第二个参数就是伪代码就是listOf(1, 2, 3).component2()</p><p>你可以在JB的issue tracker中找到以下讨论：</p><p><a href="https://youtrack.jetbrains.com/issue/KT-24308">https://youtrack.jetbrains.com/issue/KT-24308</a></p></blockquote><hr><h3 id="Return-in-Function-literal"><a href="#Return-in-Function-literal" class="headerlink" title="Return in Function literal"></a>Return in Function literal</h3><p><strong>Level：Beginner</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    (<span class="number">1.</span><span class="number">.4</span>).forEach&#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    (<span class="number">1.</span><span class="number">.4</span>).forEach(<span class="function"><span class="title">fun</span><span class="params">(it)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">2</span>) <span class="keyword">return</span></span><br><span class="line">        println(it)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What does it display? Some possibilities:</strong></p><p>a. 134134</p><p>b. 1134</p><p>c. 1341</p><p>d. Doesn’t compile.</p><blockquote><p>Author: Marcin Moskala</p></blockquote><p><strong>上题答案：</strong></p><p>d. 12</p><p><strong>解析：</strong></p><blockquote><p>哈哈哈，这就是一个很普通的lambda表达式加上一堆的label啦。别想多</p></blockquote><hr><h3 id="Int-plus-plus"><a href="#Int-plus-plus" class="headerlink" title="Int plus-plus"></a>Int plus-plus</h3><p><strong>Level：Beginner</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">    println(i.inc())</span><br><span class="line">    println(i.inc())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">    println(j++)</span><br><span class="line">    println(++j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What does it display? Some possibilities:</strong></p><p>a. 0, 1, 0, 1</p><p>b. 0, 1, 0, 2</p><p>c. 1, 1, 0, 2</p><p>d. 1, 2, 0, 2</p><blockquote><p>Author: Dmitry Kandalov</p></blockquote><p><strong>上题答案：</strong></p><p>b. 1134</p><p><strong>解析：</strong></p><blockquote><p>当我们想要在lambda表达式中使用<code>return</code>即从闭包返回的时候，我们需要使用label标签，譬如<code>return@forEach</code>.</p><p>因为<code>for-each</code>是内联函数同时允许非局部返回，所以<code>return</code>就会结束<code>f1</code>方法。</p></blockquote><hr><h3 id="Function-names"><a href="#Function-names" class="headerlink" title="Function names"></a>Function names</h3><p><strong>Level：Expert</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> ``<span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> ` `<span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> `everything works.`<span class="params">()</span></span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> `1/1/ <span class="keyword">is</span> ok; 1/0 <span class="keyword">is</span> an error`<span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Which functions have acceptable names? Some possibilities:</strong></p><p>a. ok; ok; ok; ok</p><p>b. error; ok; ok;  error;</p><p>c. error; ok; error; error;</p><p>d. error; error; error; error;</p><blockquote><p>Author: Dmitry Kandalov</p></blockquote><p><strong>上题答案：</strong></p><p>c. 1, 1, 0, 2</p><p><strong>解析：</strong></p><blockquote><p>前缀++（++j）增加数值并且返回增加后新的值，但是后缀++（i++）虽然同样增加数值但<strong>它返回的是未增加老的值</strong>。</p><p>本题带有迷惑的地方是kotlin函数<code>inc()</code>的前缀和后缀.详细请看</p><p><a href="https://www.kotlincn.net/docs/reference/operator-overloading.html#%E9%80%92%E5%A2%9E%E4%B8%8E%E9%80%92%E5%87%8F">递增和递减</a></p></blockquote><hr><h3 id="Receivers-wars"><a href="#Receivers-wars" class="headerlink" title="Receivers wars"></a>Receivers wars</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Top-level rule&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Extension receiver rule&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Dispatch receiver rule&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> Foo.<span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Member extension function rule&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> Foo.<span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testFoo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Foo().test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Test().testFoo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Which does it display? Some possibilities:</strong></p><p>a. Top-level rule</p><p>b. Extension receiver rule</p><p>c. Dispatch receiver rule</p><p>d. Member extension function rule</p><blockquote><p>Author: Marcin Moskalatma</p></blockquote><p><strong>上题答案：</strong></p><p>c. error; ok; error; error;</p><p><strong>解析：</strong></p><blockquote><ol><li>:声明必须要有名字</li><li>:Ok</li><li>和 4. : 命名包含非法字符，”,”  “;” 和 “&#x2F;“</li></ol></blockquote><hr><h3 id="Negative-numbers"><a href="#Negative-numbers" class="headerlink" title="Negative numbers"></a>Negative numbers</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(-<span class="number">1.</span>inc())</span><br><span class="line">    println(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    println(<span class="number">1</span> + -(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Which does it display? Some possibilities:</strong></p><p>a. 0, 0</p><p>b. Won’t compile in line 4</p><p>c. 0, 2</p><p>d. -2, 0</p><blockquote><p>Author: Marcin Moskala</p></blockquote><p><strong>上题答案：</strong></p><p>b. Extension receiver rule</p><p><strong>解析：</strong></p><blockquote><p>当我们有一个扩展接收者(Foo)时，接收者的方法(method)要优先于同class内的其他函数。</p><p>不可能会打印“Member extension function rule”,因为当方法(method)和扩展函数(extension function)有冲突时，方法(method)总是胜利。</p></blockquote><hr><h3 id="Child-apply"><a href="#Child-apply" class="headerlink" title="Child apply"></a>Child apply</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Node</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">lookup</span><span class="params">()</span></span> = <span class="string">&quot;lookup in: <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>: <span class="type">Node</span>(<span class="string">&quot;container&quot;</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createChild</span><span class="params">(name: <span class="type">String</span>)</span></span>: Node? = Node(name)</span><br><span class="line">    <span class="keyword">val</span> child1 = createChild(<span class="string">&quot;child1&quot;</span>)?.apply &#123;</span><br><span class="line">        println(<span class="string">&quot;child1 <span class="subst">$&#123;lookup()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> child2 = createChild(<span class="string">&quot;child2&quot;</span>).apply &#123;</span><br><span class="line">        println(<span class="string">&quot;child2 <span class="subst">$&#123;lookup()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Example()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Which does it display? Some possibilities:</strong></p><p>a. child1 lookup in: child1;child2 lookup in : child2</p><p>b. child1 lookup in: child1;child2 lookup in : container</p><p>c. child1 lookup in: container;child2 lookup in : child2</p><p>d. none of the above</p><blockquote><p>Author: Dmitry Kandalov</p></blockquote><p><strong>上题答案：</strong></p><p>d. -2, 0</p><p><strong>解析：</strong></p><blockquote><p>这两种情况我们都给<code>Int</code>使用了前缀减(<code>unaryMinus()</code>)操作符，<code>-1</code>和<code>1.unaryMinux()</code>是相等的。这就是为什么<code>1+ -(1)</code>是正常的。</p><p><code>-1.inc()</code>返回 <code>-2</code>是因为<code>inc</code>是先使用的操作符，这表达式和<code>1.inc().unaryMinus()</code>是相等的.</p><p>可以加括号来解决此问题，<code>(-1).inc()</code>。</p></blockquote><hr><h3 id="Subtypes-and-Generics-List"><a href="#Subtypes-and-Generics-List" class="headerlink" title="Subtypes and Generics: List"></a>Subtypes and Generics: List</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;<span class="type">T</span>&gt;</span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">    <span class="keyword">val</span> payload: T,</span><br><span class="line">    <span class="keyword">var</span> next: LinkedList&lt;T&gt; = EmptyList</span><br><span class="line">) : LinkedList&lt;T&gt;()</span><br><span class="line"><span class="keyword">object</span> EmptyList : LinkedList&lt;<span class="built_in">Nothing</span>&gt;()</span><br></pre></td></tr></table></figure><p><strong>Will it compile?If not, what do I need to do? Some possibilities:</strong></p><p>a. Looks great.This code will compile as is.</p><p>b. A sealed class cannot have a type parameter.</p><p>c. Write sealed class LinkedList<in T>.</p><p>d. Write sealed class LinkedList<out T></p><blockquote><p>Author: Allan Caine</p></blockquote><p><strong>上题答案：</strong></p><p>b. child1 lookup in: child1;child2 lookup in : container</p><p><strong>解析：</strong></p><blockquote><p><code>createChild</code> 返回一个可空的对象，所以<code>child2</code>的<code>apply </code>的接收者是<code>Node？</code>。</p><p>我们不能在未解包的情况下直接调用<code>lookup</code>.如果想要调用则应该使用<code>this?.lookup()</code>。</p><p>因为没有这样做，编辑器会找他能使用的<code>lookup</code>方法，即<code>Example</code>的上下文的lookup。</p></blockquote><hr><h3 id="Copy"><a href="#Copy" class="headerlink" title="Copy"></a>Copy</h3><p><strong>Level：Advanced</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Container</span>(<span class="keyword">val</span> list: MutableList&lt;String&gt;)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> list = mutableListOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> c1 = Container(list)</span><br><span class="line">    <span class="keyword">val</span> c2 = c1.copy()</span><br><span class="line">    list += <span class="string">&quot;oops&quot;</span></span><br><span class="line">    println(c2.list.joinToString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What does it display? Some possibilities:</strong></p><p>a. one, two.</p><p>b. one,two,oops</p><p>c. UnsupportedOperationException</p><p>d. will not compile</p><blockquote><p>Author: Anton Keks</p></blockquote><p><strong>上题答案：</strong></p><p>d. Write sealed class LinkedList<out T></p><p><strong>解析：</strong></p><blockquote><p>目前所写的代码不能正确编译。<code>Node&lt;T&gt;</code>的属性<code>next</code>不能给<code>EmptyList</code>的默认值。</p><p><code>LinkedList&lt;T&gt;</code>对于泛型<code>T</code>是不变的。而<code>EmptyList</code>是<code>LinkedList&lt;Nothing&gt;</code>。无论<code>T</code>的类型是什么<code>LinkedList&lt;Nothing&gt;</code>都是唯一类型。</p><p>而只要使<code>LinkedList</code>关于<code>T</code>协变，即使<code>LinkedList&lt;Nothing&gt;</code>是每个<code>LinkedList</code>的子类型，因为<code>Nothing</code>是任意类型的子类型。</p><p>密封类可以有类型参数(type parameters). Kotlin <code>object</code>不能有类型参数(type parameters). 所以b错</p><p>如果LinkedList是逆变的，<code>LinkedList&lt;Nothing&gt;</code>就变成所有LinkedList的父类型。然而本题要求的是子类型</p><p>更多解释可以参考：</p><p><a href="https://blog.kotlin-academy.com/kotlins-nothing-its-usefulness-in-generics-5076a6a457f7">https://blog.kotlin-academy.com/kotlins-nothing-its-usefulness-in-generics-5076a6a457f7</a></p></blockquote><hr><h3 id="Cyclic-object-construction"><a href="#Cyclic-object-construction" class="headerlink" title="Cyclic object construction"></a>Cyclic object construction</h3><p><strong>Level：Expert</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">A</span>(<span class="keyword">val</span> x: Any?)</span><br><span class="line"><span class="keyword">object</span> B : A(C)</span><br><span class="line"><span class="keyword">object</span> C : A(B)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    println(B.x)</span><br><span class="line">    println(C.x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What does it print? Some possibilities:</strong></p><p>a. null; null</p><p>b.C@2de80c; null</p><p>c. ExceptionInInitializerError</p><p>d. will not compile</p><blockquote><p>Author: Hiroshi Kurokawa</p></blockquote><p><strong>上题答案：</strong></p><p>b. one,two,oops</p><p><strong>解析：</strong></p><blockquote><p>data class的copy方法是一个浅拷贝(仅复制字段的引用)。使得data class immutable</p><p>来避免此类问题。</p></blockquote><hr><h3 id="Overriding-properties-that-are-used-in-a-parent"><a href="#Overriding-properties-that-are-used-in-a-parent" class="headerlink" title="Overriding properties that are used in a parent"></a>Overriding properties that are used in a parent</h3><p><strong>Level：Expert</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="keyword">open</span> <span class="keyword">val</span> a: String) &#123;</span><br><span class="line">    <span class="keyword">init</span> &#123; print(a) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Children</span>(<span class="keyword">override</span> <span class="keyword">val</span> a: String): Parent(a)</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    Children(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>What will it print? Some possibilities:</strong></p><p>a. abc</p><p>b.Unresolved reference: a</p><p>c.Nothing,it won’t compile</p><p>d. null</p><p><strong>上题答案：</strong></p><p>b.C@2de80c; null</p><p><strong>解析：</strong></p><blockquote><p>Singleton对象的初始化顺序是通过尝试按照他们的依赖关系进行拓扑排序来确定的。</p><p>在初始化周期的情况下，完整的拓扑排序是不可能的，并且有可能观察循环中涉及的对象的值为null，</p><p>如果将此值传递给期望不可为空类型的函数，则可能导致异常</p><p>如果A的构造函数取非空的参数，就会抛出异常</p><p><code>B</code> 初始化需要 <code>C</code>，<code>C</code> 初始化需要 <code>B</code>。咦，<code>B</code> 还没初始化完成呢，那么哪来的 <code>B</code> 呢，只能是 <code>null</code> 了啊！ 取自<a href="https://aisia.moe/2017/12/28/kotlin-puzzlers/">夜雀</a>博客</p><p>参考链接：<a href="http://jetbrains.github.io/kotlin-spec/#_singleton_objects">http://jetbrains.github.io/kotlin-spec/#_singleton_objects</a></p></blockquote><p><strong>本题答案：</strong></p><p>d. null</p><p><strong>解析：</strong></p><blockquote><p>这是kotlin的implement已知的最大问题，请看一下java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Parent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String a;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getA</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">    Parent(String a) &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        System.out.print(<span class="built_in">this</span>.getA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String a;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">    B(String a) &#123;</span><br><span class="line">        <span class="built_in">super</span>(a);</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如你所看到的，使用<code>getA</code>方法来获得a，唯一的问题是a被重写在<code>Child</code> 它实际上是引用<code>Child</code>里的<code>a</code>，那时候还没被赋值，因为parent总是被先初始化。</p><p>在kotlin&#x2F;js 也有相同的问题，结果是<code>undefined</code>。</p></blockquote><hr><p>题目太多了，也就不全部摘写完了，想看的同学去<a href="https://github.com/angryziber/kotlin-puzzlers/">这里</a>看，好了写完了溜了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -kotlin -易错题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin的柯里化</title>
      <link href="/2018/02/11/Kotlin%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2018/02/11/Kotlin%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>难得今天休息了一天，就一直在睡觉，突然看到群里有人说到Kotlin的柯里化，正好最近在学习Kotlin，就想要记录一下。想到自己很久没动的博客(懒..不是忙)，垂死病中惊坐起，意识到自己不能继续颓废下去了，赶紧爬起来写了这篇博客，也算是新年有个好开始吧。以后尽量把博客捡起来。。。</p></blockquote><p>Koltin是什么语言我也不想多说了，google的推荐让这个东西着实火了一把，我也就怀着好奇心去学了下，因为以前一直写Java(写的时间也不久)，确实被Kotlin的扩展函数，重载操作符，空安全给吸引到了，说实话，写了Kotlin，我真的觉得Java在这个时代有点过去式的感觉。。不多说了，看标题就知道我今天要说的是什么了。</p><p>###柯里化</p><p>这是一个神奇的东西，Java未曾出现过，起码在java8之前(即使是8我觉得也不是标准的Curry，只是像而已)，虽然Kotlin没有这个语法糖，但对于可以<code>FP</code>的Kotlin来说，这都不是事。</p><span id="more"></span><blockquote><p>维基百科这样说道：<br>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术.  </p></blockquote><p> 可能有些人觉得很困惑，确实，对没接触过fp的语言的人来说确实有点难懂。没事，<strong>Talk is cheap, show you code.</strong></p><p>####举个栗子：<br>有时候我们想要打印一些东西，于是我们如是写道</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(tag: <span class="type">String</span>, target: <span class="type">OutputStream</span>, message: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">    target.write(<span class="string">&quot;<span class="variable">$tag</span> <span class="variable">$message</span>\n&quot;</span>.toByteArray())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    log(<span class="string">&quot;louis&quot;</span>, System.<span class="keyword">out</span>, <span class="string">&quot;what f**k&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">louis what f**k</span><br></pre></td></tr></table></figure><p>一个简单的实现就完成了，但是我们看着不爽啊，这方法调着有点烦人啊(只是个例子，不要较真)，于是我们想到了柯里化。</p><p><strong>初次修改后：</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">logCurry</span><span class="params">(tag: <span class="type">String</span>)</span></span>: (target: OutputStream) -&gt; (message: Any?)-&gt; <span class="built_in">Unit</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="title">fun</span> <span class="params">(target: <span class="type">OutputStream</span>)</span></span>: (message: Any?) -&gt; <span class="built_in">Unit</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="title">fun</span> <span class="params">(message: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target.write(<span class="string">&quot;<span class="variable">$tag</span> <span class="variable">$message</span>\n&quot;</span>.toByteArray())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    logCurry(<span class="string">&quot;louis&quot;</span>)(System.<span class="keyword">out</span>)(<span class="string">&quot;what f**k&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">louis what f**k</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单的柯里化函数就完成了，但是这代码，喔吼，不是变得很麻烦了吗，看起来也不简单啊，没事我再改一下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(tag: <span class="type">String</span>)</span></span></span><br><span class="line">    = <span class="function"><span class="title">fun</span> <span class="params">(target: <span class="type">OutputStream</span>)</span></span></span><br><span class="line">    = <span class="function"><span class="title">fun</span> <span class="params">(message: <span class="type">Any</span>?)</span></span></span><br><span class="line">    = target.write(<span class="string">&quot;<span class="variable">$tag</span> <span class="variable">$message</span>\n&quot;</span>.toByteArray())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">log(<span class="string">&quot;louis&quot;</span>)(System.<span class="keyword">out</span>)(<span class="string">&quot;what f**k&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">louis what f**k</span><br></pre></td></tr></table></figure><p>这就是把他柯里化的最终版本了，其实也只是利用了fp的范式，看到这里你应该要骂人了，这哪里简单了，没关系，我们写Kotlin，要的就是简单易读(骚)，我们不还有扩展函数吗，给这种东西写个柯里化的扩展还不是分分钟吗，仔细看。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>:</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;P1, P2, P3, R&gt;</span> Function3<span class="type">&lt;P1, P2, P3, R&gt;</span>.<span class="title">curried</span><span class="params">()</span></span>: (P1) -&gt; (P2) -&gt; (P3) -&gt; R &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="title">fun</span> <span class="params">(p1: <span class="type">P1</span>)</span></span>: (P2) -&gt; (P3) -&gt; R &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="title">fun</span> <span class="params">(p2: <span class="type">P2</span>)</span></span>: (P3) -&gt; R &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="title">fun</span> <span class="params">(p3: <span class="type">P3</span>)</span></span>: R &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>(p1, p2, p3)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    ::log.curried()(<span class="string">&quot;louis&quot;</span>)(System.<span class="keyword">out</span>)(<span class="string">&quot;what f**k&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>::log是method reference(函数引用)，java8后也有这个概念，这就不多说了，另一个故事了，你应该看到了，我们给三个参数的函数写了个扩展方法，这样我们所有三个参数的函数柯里化就可以直接调这个扩展函数了。</p><blockquote><p>其实柯里化本身很简单，难的是他的概念。</p></blockquote><p>这东西我也是记录一下，现在差不多写完了，收工睡觉了。</p><p><strong>谢谢你看到这里看到发牢骚&gt;_&lt;。。。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binder随意记录</title>
      <link href="/2017/12/12/Binder/"/>
      <url>/2017/12/12/Binder/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>###为何选择Binder</p><hr><p>Linux已经拥有管道，system V IPC，socket等IPC手段，却还要依赖Binder来实现进程间通信，说明Binder具有无可比拟的优势。</p><p>####传输性能好<br>Binder的优点之一就是，复杂数据类型传递可以复用内存。</p><ul><li>socket：是一个通用接口，导致其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。</li><li>管道和消息队列：因为采用存储转发方式，所以至少需要拷贝2次数据，效率低。</li><li>共享内存：虽然在传输时没有拷贝数据，但其控制机制复杂。</li></ul><table><thead><tr><th align="left">IPC</th><th align="right">数据拷贝次数</th></tr></thead><tbody><tr><td align="left">共享内存</td><td align="right">0</td></tr><tr><td align="left">Binder</td><td align="right">1</td></tr><tr><td align="left">Socket&#x2F;管道&#x2F;消息队列</td><td align="right">2</td></tr></tbody></table><p>####安全性高<br>传统IPC没有任何安全措施，完全以来上层协议来确保。首先传统IPC的接收方无法获得对方进程可靠的UID&#x2F;PID（用户ID&#x2F;进程ID），从而无法鉴别对方身份。</p><span id="more"></span><p>Android为每个安装好的应用程序分配了自己的UID，故进程的UID是鉴别进程身份的重要标志。可靠的身份标识只有IPC机制本身在内核中添加。</p><p>传统IPC访问接入点是开放的，无法建立私有通道，Binder可以使用匿名Binder建立私密通道，别的进程就无法通过穷举或猜测等任何方式获得该Binder的引用，向该Binder发送请求。</p><h4 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h4><hr><p>Binder使用的是C&#x2F;S通信方式，一个进程可以开启服务专门负责处理某个模块的业务，多个进程可以作为Client同时向Server发起请求。</p><p>使用了面向对象的设计，发起一次binder call 就像在调用本地方法一样简单。</p><p><strong>一次拷贝？</strong></p><p>当Client向Server发送数据时，Client会先从自己的进程空间把通信数据拷贝到内核空间，因为Server和内核共享数据，所以不在需要重新拷贝数据，而是直接通过内存地址的偏移量直接获取到数据地址。总体来说拷贝了一次。</p><p>Server和内核空间之所以能够共享一块空间数据主要是通过<code>binder_mmap</code>来实现的。它的主要功能是在内核的虚拟地址空间申请一块和用户虚拟内存相同大小的内存，然后在申请一个page大小的内存，将它映射到内核虚拟地址空间和用户虚拟内存空间，从而实现了用户空间缓存和内核空间缓冲同步的功能。</p><h4 id="Binder总体架构"><a href="#Binder总体架构" class="headerlink" title="Binder总体架构"></a>Binder总体架构</h4><hr><p>在Android系统中，运行在内核空间的，负责各个用户进程通过Binder通信的内核模块叫做Binder驱动，Binder驱动虽然默默无闻，确是通信的核心，尽管叫“驱动”，实际上和硬件设备没有任何关系，只是实现方式和设备驱动程序是一样的。</p><blockquote><p>面向对象思想的引入将进程间通信转化为通过对某个Binder对象的引用调用该对象的方法，而其独特之处在与Binder对象是一个可以跨进程引用的对象，他的实体位于一个进程中，而他的引用确遍布系统的各个进程中。最诱人的是这个引用和java里引用一样既可以是强类型，也可以是弱类型，而且从一个进程传给其他进程，让大家都能访问同一个server，就像讲一个对象或引用赋值给另一个引用一样。Binder模糊了进程边界，淡化了进程间通信过程。整个系统仿佛运行于同一个面向对象的程序之中。形形色色的Binder对象以及星罗棋布的引用仿佛粘连各个应用程序的胶水。</p></blockquote><p><strong>首先Binder分为Binder对象和Binder驱动</strong>，即Binder驱动就是主要的内核模块，而这个Binder对象是通讯的载体，可以自由的通过Bidner驱动自由穿梭任意进程。所以客户端或者服务器就可以把数据放入Binder对象里，然后进行调用和通讯。类似胞吞胞吐。</p><p><strong>Binder框架定义了四个角色：</strong>Server，Client，ServiceManager以及Binder驱动。</p><blockquote><p>Server进程里的Binder对象指的是Binder本地对象，Client里面的对象指的是Binder代理对象；在Binder对象进行跨进程传递的时候，Binder驱动会自动完成这两种类型的转换；因此Binder驱动必然保存每一个跨进程的Binder对象的相关信息；在驱动中，Binder本地对象的代表是一个是一个叫做<code>binder_node</code>的数据结构，Binder代理对象 是用<code>binder_ref</code>代表的；有得地方把Binder本地对象直接称作Binder实体，把Binder代理对象直接称作 Binder引用（句柄）。</p></blockquote><h4 id="ServiceManager与实名Binder"><a href="#ServiceManager与实名Binder" class="headerlink" title="ServiceManager与实名Binder"></a>ServiceManager与实名Binder</h4><hr><blockquote><p>ServiceManager是一个进程，Server是另一个进程，Server向SM中注册Binder必然会涉及到进程间通信。当前实现的是进程间通信却又要用到进程间通信，就好像蛋孵出鸡的前提却是鸡孵蛋。Binder的实现比较巧妙，预先创造一只鸡来孵蛋：SM和其他进程间同样采用Binder通信，SM是Server端，有自己的Binder对象（实体），其他进程都是Client，需要通过这个Binder的引用来实现Binder的注册，查询和获取。SM提供的Binder比较特殊，他没有名字也不需要注册，当一个进程使用<code>BINDER_SET_CONTEXT_MGR</code>命令将自己注册在SM时Binder驱动会自动为他创建Binder实体（这就是预先造好的鸡）。其次这个Binder的引用在所有Client中都固定为0而无须通过其他手段获得。也就是说，一个Server若要向SM注册自己Binder就必需通过0这个引用号和SM的Binder通信。类比网络通信，0号引用就好比域名服务器的地址，你必须预先手工或动态配置好。</p></blockquote><ul><li>首先，Server在自己的进程中向Binder驱动申请创建一个Server的Binder实体。</li><li>Binder驱动为这个Server创建位于内核中的Binder实体节点以及Binder的引用。（在Binder驱动中创建一块内存）</li><li>然后Server通过<strong>0</strong>这个引用号和SM的的Binder通信 将名字和新建的引用打包传递给SM（实体没有传给SM），通知SM注册一个名叫XXX的Server。</li><li>SM收到数据包后，从中取出Server名字和引用，填入一张查找表中。</li></ul><p>Server初始化的时候，SM做了以下操作：</p><ol><li>为binder分配128k的内存</li><li>通知binder驱动，使自身成为binder驱动的“DNS”</li><li>维护一个监听Server的死循环，并且维护持有所有Server句柄的svclist</li><li>添加Server的时候，进行权限，内存（充足）进行判断，如果没有添加过则将Server添加至svclist。</li></ol><h4 id="Client获得实名Binder的引用"><a href="#Client获得实名Binder的引用" class="headerlink" title="Client获得实名Binder的引用"></a>Client获得实名Binder的引用</h4><hr><blockquote><p>Server向SM注册了Binder引用及其名字后，Client就可以通过名字获取该Binder的引用了。Client也利用保留的0号引用向SM请求访问某个Binder：我申请获得名字叫张三的Binder的引用。SM收到这个连接请求，从请求数据包里获得Binder的名字，在查找表里找到该名字对应的条目，从条目中取出Binder的引用，将该引用作为回复发送给发起请求的Client。从面向对象的角度，这个Binder对象 现在有两个引用：一个位于SM中，一个位于发送请求的Client中。如果接下来有更多的Client请求该binder，系统中就会有更多的引用指向该Binder，就像Java里一个对象存在多个引用一样。而且类似的这些指向Binder的引用是强类型，从而确保只要有引用Binder实体就不会被释放掉。</p></blockquote><h4 id="Client与Server通讯"><a href="#Client与Server通讯" class="headerlink" title="Client与Server通讯"></a>Client与Server通讯</h4><hr><blockquote><p>client向SM发送申请服务Server的请求，那么SM就可以在查找表中找到该Service的Binder引用。并把Binder引用（BpBinder）返回给Client，此时Client便可以通过这个引用向Server（间接）发起调用，Binder引用将参数包装然后交给驱动并获取Server的调用结果。</p></blockquote><h4 id="Binder的线程管理"><a href="#Binder的线程管理" class="headerlink" title="Binder的线程管理"></a>Binder的线程管理</h4><hr><p>每个binder的Server进程会创建很多线程来处理Binder请求，可以简单的理解为创建了一个Binder的线程池（虽然实际上并不完全是这样简单的线程管理方式），而真正管理这些线程并不是由这个Server端来管理的，而是由Binder驱动进行管理的。</p><p>一个进程的Binder线程数默认最大是16，超过的请求会被阻塞等待空闲的Binder线程。你做进程间通信时处理并发问题就会有一个底，比如使用<code>ContentProvider</code>时，你就很清楚他的CRUD方法只能同时有16个线程在跑。（应用与ContentProvider为不同进程时）。</p><h4 id="四大组件中常见的2个binder服务是？"><a href="#四大组件中常见的2个binder服务是？" class="headerlink" title="四大组件中常见的2个binder服务是？"></a>四大组件中常见的2个binder服务是？</h4><p>一个是实现了IActivityManager接口的ActivityManagerNative，ActivityManagerService是他的子类，提供了AMS中的所有服务，从APP调用binder call到AMS都是同步的，APP需要阻塞等待AMS执行完毕。</p><p>一个是实现了IApplicationThread接口的ApplicationThreadNative，ActivityThread中的内部类ApplicationThread是他的子类，AMS可以发起异步请求到APP，不需要等待APP执行完成。</p><ul><li>BpBinder：Binder的代理对象，内部有一个成员变量mHandle，记录着远侧滑盖服务对象的handle</li><li>BBinder：Binder本地服务对象</li></ul><h5 id="binder-ref与binder-node有什么区别"><a href="#binder-ref与binder-node有什么区别" class="headerlink" title="binder_ref与binder_node有什么区别"></a>binder_ref与binder_node有什么区别</h5><ul><li>binder_ref与binder_node都存在于内核空间</li><li>binder_node是实体对象、binder_ref是引用对象</li><li>binder_node被binder_ref引用，binder_ref被BpBinder引用</li></ul><h5 id="应用如何获取和添加Binder服务"><a href="#应用如何获取和添加Binder服务" class="headerlink" title="应用如何获取和添加Binder服务"></a>应用如何获取和添加Binder服务</h5><p>获取与添加Binder服务的操作是交给大管家<code>ServiceManager</code>实现的；ServiceManager进程启动后会通过binder_loop睡眠等待客户端的请求，如果进程被客户端唤醒就会调用svcmgr_handler来处理获取或者添加服务的请求</p><p>ServiceManager也是一种Binder服务，当应用获取ServiceManager服务的代理时，它的handle句柄固定为0，所以才不需要去查找，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> IServiceManager <span class="title function_">getIServiceManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sServiceManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sServiceManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Find the service manager</span></span><br><span class="line">    sServiceManager = ServiceManagerNative.asInterface(BinderInternal.getContextObject());</span><br><span class="line">    <span class="keyword">return</span> sServiceManager;</span><br><span class="line">&#125;</span><br><span class="line">sp&lt;IBinder&gt; ProcessState::getContextObject(const sp&lt;IBinder&gt;&amp; <span class="comment">/*caller*/</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> getStrongProxyForHandle(<span class="number">0</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Binder协议中BC-与BR-开头的协议都有什么区别？"><a href="#Binder协议中BC-与BR-开头的协议都有什么区别？" class="headerlink" title="Binder协议中BC_与BR_开头的协议都有什么区别？"></a>Binder协议中BC_与BR_开头的协议都有什么区别？</h5><ul><li>BC_：全称Binder Command，进程发送给Binder驱动数据时携带的协议</li><li>BR_：全程Binder Return，Binder驱动发送给进程数据时携带的协议</li></ul><h5 id="Binder服务在调用期间抛出了RuntimeException异常，服务端会Crash吗"><a href="#Binder服务在调用期间抛出了RuntimeException异常，服务端会Crash吗" class="headerlink" title="Binder服务在调用期间抛出了RuntimeException异常，服务端会Crash吗"></a>Binder服务在调用期间抛出了RuntimeException异常，服务端会Crash吗</h5><p>服务端不会Crash，RuntimeException被Binder服务端线程捕捉，随后将异常信息写入到reply中，发回Binder客户端进程，最后客户端binder线程会抛出这个异常，如果没有捕捉到这个RuntimeException，那么Binder客户端进程会Crash。</p><h5 id="客户端调用Binder接口后抛出的DeadObjectException是什么意思？"><a href="#客户端调用Binder接口后抛出的DeadObjectException是什么意思？" class="headerlink" title="客户端调用Binder接口后抛出的DeadObjectException是什么意思？"></a>客户端调用Binder接口后抛出的DeadObjectException是什么意思？</h5><p>之所以抛出DeadObjectException最常见的原因是Binder服务端进程已经死亡。客户端进行binder调用时，Binder驱动发现服务端进程不能回应请求，那么就会抛出异常给客户端。</p><p>还有一些比较生僻的原因，比如服务端此时的缓存内存空间（1016k）已经被占满了，Binder驱动就认为服务端此时并不能处理这个调用，那么就会在C++层抛出DeadObjectException到Java层。</p><h5 id="Binder驱动加载过程中有哪些重要的步骤？"><a href="#Binder驱动加载过程中有哪些重要的步骤？" class="headerlink" title="Binder驱动加载过程中有哪些重要的步骤？"></a>Binder驱动加载过程中有哪些重要的步骤？</h5><ul><li>binder_init：初始化Binder驱动环境，内核工作队列、文件系统节点、misc设备等</li><li>binder_open：打开Binder设备，获取Binder驱动的文件描述符（fd）</li><li>binder_mmap：将用户进程地址空间映射到Binder驱动设备内存。这也是Binder能够实现一次拷贝以来的根本。</li><li>binder_ioctl：Binder的驱动的核心功能，用来进行数据读写操作</li></ul><h5 id="Binder的死亡通知机制的作用是什么，如何实现？"><a href="#Binder的死亡通知机制的作用是什么，如何实现？" class="headerlink" title="Binder的死亡通知机制的作用是什么，如何实现？"></a>Binder的死亡通知机制的作用是什么，如何实现？</h5><p>Binder服务端进程死亡后，依赖着Binder实体对象的客户端代理对象也会失效。当Binder服务无效时，驱动程序会发送死亡通知给各个已注册服务的客户端进程，以方便客户端做些销毁之类的操作。</p><p>思维通知机制最常用在APP和AMS服务，是典型的C&#x2F;S架构，当APP端的进程死亡后，其ApplicationThreadNative会被销毁，随后Binder驱动会发出死亡通知给AMS，方便清理已经失效的四大组件及应用进程信息。</p><p>binder驱动的加载阶段会打开&#x2F;dev&#x2F;driver文件，当服务端的进程死亡后，系统会进入清理阶段，关闭所有与进程相关联的资源，这其中就包含了关闭&#x2F;dev&#x2F;driver文件描述符的操作，随后就会调用到Binder驱动的binder_release方法，结果层层调用最后会调用到binderDied这个回调方法。如果APP进程之前注册并实现过DeathRecipient这个接口，此时APP就能对Server进程的死亡做出处理。</p><h5 id="bindService所绑定的“服务概念和Binder中的服务Server有什么区别”"><a href="#bindService所绑定的“服务概念和Binder中的服务Server有什么区别”" class="headerlink" title="bindService所绑定的“服务概念和Binder中的服务Server有什么区别”"></a>bindService所绑定的“服务概念和Binder中的服务Server有什么区别”</h5><p>bindService绑定的服务所指的是四大组件中的Service；调用context.bindService方法可以让Activity与Service形成一种“绑定”的概念。这个概念是在Android Framework定义，形成“绑定”的关系之后，Activity除了能够和Service进行通信之外，他们所在的进程存活状态也会相关联。<strong>注意，这个Service不确定是运行在本地还是远端，大部分情况下我们调用<code>startService</code>只是用来启动一个在本地定义的Service组件。当使用<code>bindService</code>时，一般是需要调用Service通过onBind返回的Binder服务接口，以此实现Activity与Service之间的通信。</strong></p><p>Binder服务则是一个真正的C&#x2F;S架构中的服务端角色。这个服务需要继承Binder类并实现一套服务接口才能生效。我们常见的ActivityManagerService正是一个继承了Binder类并运行在system_server的服务，用来提供四大组件以及进程方面的服务。</p><p>注意，调用bindService后，Service.onBind方法会返回Binder服务Stub对象，然后APP会在AMS进行登记，然后经过层层调用才会在Binder客户端调用<code>onConnected</code>方法，如果Binder客户端和其服务端在同一个进程，客户端拿到的应该还是Stub对象，如果不在同一进程中，客户端拿到的应该是Binder服务的Proxy对象。</p><p>本质上，bindService锁绑定的服务和Binder的服务属于同一类，他们实现进程间通信的原理都是借助了Binder这一套机制。</p><h5 id="writeStrongBinder与readStrongBinder的作用和原理"><a href="#writeStrongBinder与readStrongBinder的作用和原理" class="headerlink" title="writeStrongBinder与readStrongBinder的作用和原理"></a>writeStrongBinder与readStrongBinder的作用和原理</h5><p>主要作用是实现两个进程之间的双工通信。还是以APP客户端的ApplicationThread和system_server服务端的ActivityManagerService这两个Binder服务来举例子，这两个服务的接口的大致模式都相同。</p><h5 id="每个进程最多存在多少个Binder线程，这些线程都被占满后会导致什么问题？"><a href="#每个进程最多存在多少个Binder线程，这些线程都被占满后会导致什么问题？" class="headerlink" title="每个进程最多存在多少个Binder线程，这些线程都被占满后会导致什么问题？"></a>每个进程最多存在多少个Binder线程，这些线程都被占满后会导致什么问题？</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --frameworks/nativebs/binder/ProcessState.cpp</span></span><br><span class="line">#define DEFAULT_MAX_BINDER_THREADS <span class="number">15</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">open_driver</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fd</span> <span class="operator">=</span> open(<span class="string">&quot;/dev/binder&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="type">size_t</span> <span class="variable">maxThreads</span> <span class="operator">=</span> DEFAULT_MAX_BINDER_THREADS;</span><br><span class="line">        result = ioctl(fd, BINDER_SET_MAX_THREADS, &amp;maxThreads);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Binder线程池中的线程数量是在Binder驱动初始化时被定义的，进程池中的线程个数上限为15个，加上主Binder线程，一共最大能存在16个binder线程；</p><p>当binder线程都在执行工作时，也就是当出现线程饥饿的时候，从别的进程调用的binder请求如果是同步的话，会在todo队列中阻塞等待，直到线程池中有空闲的binder进程来处理请求。</p><h5 id="binder传输数据的最大限制是多少，占满后会导致什么问题"><a href="#binder传输数据的最大限制是多少，占满后会导致什么问题" class="headerlink" title="binder传输数据的最大限制是多少，占满后会导致什么问题"></a>binder传输数据的最大限制是多少，占满后会导致什么问题</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --frameworks/nativebs/binder/ProcessState.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINDER_VM_SIZE ((1*1024*1024) - (4096 *2))</span></span><br><span class="line">ProcessState::<span class="built_in">ProcessState</span>()</span><br><span class="line">    : <span class="built_in">mDriverFD</span>(<span class="built_in">open_driver</span>())</span><br><span class="line">    , <span class="built_in">mVMStart</span>(MAP_FAILED)</span><br><span class="line">    , <span class="built_in">mThreadCountLock</span>(PTHREAD_MUTEX_INITIALIZER)</span><br><span class="line">    , <span class="built_in">mThreadCountDecrement</span>(PTHREAD_COND_INITIALIZER)</span><br><span class="line">    , <span class="built_in">mExecutingThreadsCount</span>(<span class="number">0</span>)</span><br><span class="line">    , <span class="built_in">mMaxThreads</span>(DEFAULT_MAX_BINDER_THREADS)</span><br><span class="line">    , <span class="built_in">mManagesContexts</span>(<span class="literal">false</span>)</span><br><span class="line">    , <span class="built_in">mBinderContextCheckFunc</span>(<span class="literal">NULL</span>)</span><br><span class="line">    , <span class="built_in">mBinderContextUserData</span>(<span class="literal">NULL</span>)</span><br><span class="line">    , <span class="built_in">mThreadPoolStarted</span>(<span class="literal">false</span>)</span><br><span class="line">    , <span class="built_in">mThreadPoolSeq</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// mmap the binder, providing a chunk of virtual address space to receive transactions.</span></span><br><span class="line">    mVMStart = <span class="built_in">mmap</span>(<span class="number">0</span>, BINDER_VM_SIZE, PROT_READ, MAP_PRIVATE | MAP_NORESERVE, mDriverFD, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用mmap时会指定Binder内存缓冲区的大小为1016k；当服务端的内存缓冲区被Binder进程占用满后，Binder驱动不会在处理binder调用并在c++层抛出DeadObjectException到binder客户端。<br><strong>同步空间是1016k，异步空间只有他的一半，也就是508k</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// --kernel/msm-3.18/drivers/staging/android/binder_alloc.c</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binder_buffer</span> *<span class="built_in">binder_alloc_new_buf</span>(<span class="keyword">struct</span> binder_alloc *alloc,</span><br><span class="line">                    <span class="type">size_t</span> data_size,</span><br><span class="line">                    <span class="type">size_t</span> offsets_size,</span><br><span class="line">                    <span class="type">size_t</span> extra_buffers_size,</span><br><span class="line">                    <span class="type">int</span> is_async)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (is_async &amp;&amp;</span><br><span class="line">    <span class="comment">// 当Binder缓存空间不足时将会出现异常，Binder驱动不再会派发这个binder请求</span></span><br><span class="line">    alloc-&gt;free_async_space &lt; size + <span class="built_in">sizeof</span>(<span class="keyword">struct</span> binder_buffer)) &#123;</span><br><span class="line">    <span class="built_in">binder_alloc_debug</span>(BINDER_DEBUG_BUFFER_ALLOC,</span><br><span class="line">             <span class="string">&quot;%d: binder_alloc_buf size %zd failed, no async space left\n&quot;</span>,</span><br><span class="line">              alloc-&gt;pid, size);</span><br><span class="line">    eret = <span class="built_in">ERR_PTR</span>(-ENOSPC);</span><br><span class="line">    <span class="keyword">goto</span> error_unlock;</span><br><span class="line">&#125;</span><br><span class="line">error_unlock:</span><br><span class="line"><span class="built_in">mutex_unlock</span>(&amp;alloc-&gt;mutex);</span><br><span class="line"><span class="keyword">return</span> eret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Binder驱动什么时候释放缓冲区的内存"><a href="#Binder驱动什么时候释放缓冲区的内存" class="headerlink" title="Binder驱动什么时候释放缓冲区的内存"></a>Binder驱动什么时候释放缓冲区的内存</h5><p>是在binder call之后，调用Parcel.recycle来完成释放内存的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">startActivity</span><span class="params">(IApplicationThread caller, String callingPackage, Intent intent,</span></span><br><span class="line"><span class="params">        String resolvedType, IBinder resultTo, String resultWho, <span class="type">int</span> requestCode,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> startFlags, ProfilerInfo profilerInfo, Bundle options)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">    <span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">    mRemote.transact(START_ACTIVITY_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">    reply.recycle();</span><br><span class="line">    data.recycle();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="为什么使用广播传输2MB的Bitmap会跑异常，而使用AIDL生成的Binder接口传输Bitmap就不会抛异常呢？"><a href="#为什么使用广播传输2MB的Bitmap会跑异常，而使用AIDL生成的Binder接口传输Bitmap就不会抛异常呢？" class="headerlink" title="为什么使用广播传输2MB的Bitmap会跑异常，而使用AIDL生成的Binder接口传输Bitmap就不会抛异常呢？"></a>为什么使用广播传输2MB的Bitmap会跑异常，而使用AIDL生成的Binder接口传输Bitmap就不会抛异常呢？</h5><p>通过Binder直接传输Bitmap，如果bitmap的大小大于128k，那么传输Bitmap内容的方式就会使用ashmem，Binder只需要负责传输ashmem的fd到服务端即可。这种Binder+ashmem的方式在Android中很常见，比如四大组件的ContentProvider.query方法，从Provider中查找的数据通常会超过1016k这个限制，使用ashmem不仅能突破这个限制，还有提高大量数据传输的效率</p><p>使用广播来传输跨进程传输数据的话则不一样，bitmap是被填入到Bundle中，随后以Parcelable的序列化方式传输到AMS的，如果Bundle数据量大于800k，就会抛出TrasnactionTooLargeException的异常</p><p>依据Bitmap是否过大来使用ashmem还是Binder的方式传输内容的逻辑在native层的Bitmap_createFromParcel。</p><h5 id="应用程序为什么支持Binder通信，直接可以使用四大组件呢"><a href="#应用程序为什么支持Binder通信，直接可以使用四大组件呢" class="headerlink" title="应用程序为什么支持Binder通信，直接可以使用四大组件呢?"></a>应用程序为什么支持Binder通信，直接可以使用四大组件呢?</h5><p>所有应用的进程都是通过调用AMS.startProcessLocked方法来fork Zygote进程创建的；Zygote在启动时会在preloadClasses中预先加载上千个类，而在fork子进程时，这些操作就不需要在做了，大大节约了子进程的启动时间。</p><p>应用进程的Binder驱动初始化的操作正是在zygote fork自身之后做的。system_server与zygote的通信使用socket，之所以不使用binder的原因很简单，socket的使用对于写这个功能的工程师来说更简单。</p><p>在zygote进程的初始化操作完成后，zygote会通过socket返回给system_server pid，随后AMS会将pid和应用的Application进行绑定。也就是说在应用调用Application.onCreate之前，binder驱动的初始化就已经完成了，所以直接就可以使用Binder来通信。</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> Binder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几分钟手写一个双向链表</title>
      <link href="/2017/11/07/%E5%87%A0%E5%88%86%E9%92%9F%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2017/11/07/%E5%87%A0%E5%88%86%E9%92%9F%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>链表和顺序表</p></blockquote><ol><li>首先，对比一下顺序表和链表</li></ol><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><blockquote><ul><li>优点：尾插效率高，支持随机访问</li><li>缺点：中间插入或者删除效率低</li><li>应用：ArrayList  ..</li></ul></blockquote><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><blockquote><ul><li>优点： 头插，中间插，删除效率高</li><li>缺点：不支持随机访问</li><li>应用场景：MessageQueue</li></ul></blockquote><ol start="2"><li>为什么循序表的中间插入和删除的效率低呢？为什么链表的头插尾插删除效率高呢？</li></ol><p>还是看源码，就从ArrayList和LinkedList看看：</p><span id="more"></span><p>ArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src, <span class="type">int</span> srcOfs, Object dest,</span></span><br><span class="line"><span class="params">      <span class="type">int</span> destOfs, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">null</span> || dest == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; srcType = src.getClass();</span><br><span class="line">    Class&lt;?&gt; destType = dest.getClass();</span><br><span class="line">    <span class="keyword">if</span> (!srcType.isArray() || !destType.isArray()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayStoreException</span>(<span class="string">&quot;Must be array types&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; srcComp = srcType.getComponentType();</span><br><span class="line">    Class&lt;?&gt; destComp = destType.getComponentType();</span><br><span class="line">    <span class="keyword">if</span> (srcComp.modifiers != destComp.modifiers</span><br><span class="line">        || (srcComp.isPrimitive() &amp;&amp; !srcComp.equals(destComp))) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayStoreException</span>(<span class="string">&quot;Array types must match&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">srclen</span> <span class="operator">=</span> getArrayLength(src);</span><br><span class="line">    <span class="type">int</span> <span class="variable">destlen</span> <span class="operator">=</span> getArrayLength(dest);</span><br><span class="line">    <span class="keyword">if</span> (srcOfs &lt; <span class="number">0</span> || destOfs &lt; <span class="number">0</span> || len &lt; <span class="number">0</span> || srcOfs + len &gt; srclen</span><br><span class="line">        || destOfs + len &gt; destlen) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the arrays are not references or if they are exactly the same type, we</span></span><br><span class="line"><span class="comment">     * can copy them in native code for speed. Otherwise, we have to copy them</span></span><br><span class="line"><span class="comment">     * in Java so we get appropriate errors.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((!srcComp.isPrimitive() || srcComp.isArray())</span><br><span class="line">        &amp;&amp; !srcType.equals(destType)) &#123;</span><br><span class="line">      <span class="comment">// copy in Java to make sure we get ArrayStoreExceptions if the values</span></span><br><span class="line">      <span class="comment">// aren&#x27;t compatible</span></span><br><span class="line">      Object[] srcArray = (Object[]) src;</span><br><span class="line">      Object[] destArray = (Object[]) dest;</span><br><span class="line">      <span class="keyword">if</span> (src == dest &amp;&amp; srcOfs &lt; destOfs) &#123;</span><br><span class="line">        <span class="comment">// TODO(jat): how does backward copies handle failures in the middle?</span></span><br><span class="line">        <span class="comment">// copy backwards to avoid destructive copies</span></span><br><span class="line">        srcOfs += len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">destEnd</span> <span class="operator">=</span> destOfs + len; destEnd-- &gt; destOfs;) &#123;</span><br><span class="line">          destArray[destEnd] = srcArray[--srcOfs];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">destEnd</span> <span class="operator">=</span> destOfs + len; destOfs &lt; destEnd;) &#123;</span><br><span class="line">          destArray[destOfs++] = srcArray[srcOfs++];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      nativeArraycopy(src, srcOfs, dest, destOfs, len);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>从以上可以看出主要通过数组内存的拷贝来进行添加，越在中间越耗时。</p><p>LinkedList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">checkPositionIndex(index);</span><br><span class="line"><span class="keyword">if</span> (index == size)</span><br><span class="line">linkLast(element);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Links e as last element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;</span><br><span class="line">        <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而链表因为他的存储是不连续的，改一下引用或者叫指针就ok了，所以速度很快。</p><p>但是链表查找是是非常慢的，特别是在中间的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能通过迭代来查找目标。</p><blockquote><p>为了性能考虑，请在选择时谨慎，尤其是在大数据的情况下。</p></blockquote><ol start="3"><li>说了这么多手写一下LinkedList吧。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> LouisShark</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@mail</span> mshark.louis@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LouisLinkedList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LouisLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E e)</span> &#123;</span><br><span class="line">        checkIndexValid(index);</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            linkLast(e);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            linkBefore(e, node(index));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在p之前插入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; p)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; pred = p.prev;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, p);</span><br><span class="line">        p.prev = newNode;</span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkIndexValid(index);</span><br><span class="line">        <span class="keyword">return</span> node(index).item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点的方法</span></span><br><span class="line"><span class="comment">     * 头尾节点的删除特殊对待</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkIndexValid(index);</span><br><span class="line">        Node&lt;E&gt; target = node(index);</span><br><span class="line">        <span class="keyword">return</span> unlink(target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">unlink</span><span class="params">(Node&lt;E&gt; p)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">E</span> <span class="variable">old</span> <span class="operator">=</span> p.item;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 记录删除节点的前驱和后继 防止后来的更改带来的破坏</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; pre = p.prev;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = p.next;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//说明是头结点 直接将当前结点的后继赋值给头结点</span></span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将节点的后继赋值给上个节点的后继 断开节点的前驱(设置为null)</span></span><br><span class="line">            pre.next = next;</span><br><span class="line">            p.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//声明是尾节点 直接将当前结点的前驱赋值给尾节点</span></span><br><span class="line">            last = pre;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//将节点的前驱赋值给下个节点的前驱 断开节点的后继(设置为null)</span></span><br><span class="line">            next.prev = pre;</span><br><span class="line">            p.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.item = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkIndexValid</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(<span class="string">&quot;index越界&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">     * 查找索引处节点的方法</span></span><br><span class="line"><span class="comment">     * 这里判断index在前一半还是后一半进行查找的优化(因为链表只能遍历查找，不像顺序表一样可以随机访问)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                x = x.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                x = x.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尾部插入的方法</span></span><br><span class="line"><span class="comment">     * 尾部插入就是吧pre指向last，next指向null</span></span><br><span class="line"><span class="comment">     * 这里要注意是否插入的是第一个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>) &#123;</span><br><span class="line">            first = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            l.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现一个简单的增删改查功能还是很快的吧，代码里注释也写的很清楚了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建nginx</title>
      <link href="/2017/10/11/%E6%90%AD%E5%BB%BAngnix/"/>
      <url>/2017/10/11/%E6%90%AD%E5%BB%BAngnix/</url>
      
        <content type="html"><![CDATA[<p>最近萌生搭建一个流媒体服务器的想法，因为自己在写一些音视频的东西，所以就想搞一个玩一玩。本篇在ubuntu16.04下成功。</p><h2 id="第一部分：准备工作"><a href="#第一部分：准备工作" class="headerlink" title="第一部分：准备工作"></a>第一部分：准备工作</h2><p>先在&#x2F;root&#x2F;下新建一个目录存放这些文件。</p><blockquote><p><code>mkdir nginx</code><br><code>cd nginx</code></p></blockquote><p>然后在执行下面三条命令。</p><h4 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h4><p><code>wget http://nginx.org/download/nginx-1.12.1.tar.gz</code></p><h4 id="下载OpenSSL-因为Nginx依赖于OpenSSL"><a href="#下载OpenSSL-因为Nginx依赖于OpenSSL" class="headerlink" title="下载OpenSSL(因为Nginx依赖于OpenSSL)"></a>下载OpenSSL(因为Nginx依赖于OpenSSL)</h4><p><code>wget https://github.com/openssl/openssl/archive/OpenSSL_1_1_0f.tar.gz</code></p><h4 id="下载Rtmp"><a href="#下载Rtmp" class="headerlink" title="下载Rtmp"></a>下载Rtmp</h4><p><code>wget https://github.com/arut/nginx-rtmp-module/archive/v1.2.0.tar.gz</code></p><span id="more"></span><h2 id="第二部分-编译"><a href="#第二部分-编译" class="headerlink" title="第二部分 编译"></a>第二部分 编译</h2><blockquote><p><code>cd openssl-OpenSSL_1_1_0f/</code></p><p><code>mkdir bin</code></p><p><strong>.&#x2F;config –prefix&#x3D;`pwd`&#x2F;bin</strong></p></blockquote><p>上面这条执行完之后会出现Makefile文件，接下来正式编译</p><blockquote><p>make install</p></blockquote><p>然后回到Nginx目录下</p><blockquote><p> cd nginx-1.12.1&#x2F;</p><p> cd auto&#x2F;lib&#x2F;openssl&#x2F;</p></blockquote><p>然后修改conf文件</p><blockquote><p>vim conf</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      if [ $ngx_found = no ]; then</span><br><span class="line"></span><br><span class="line">      # MacPorts</span><br><span class="line"></span><br><span class="line">          ngx_feature=&quot;OpenSSL library in /opt/local/&quot;</span><br><span class="line">          ngx_feature_path=&quot;/opt/local/include&quot;</span><br><span class="line"></span><br><span class="line">          if [ $NGX_RPATH = YES ]; then</span><br><span class="line">              ngx_feature_libs=&quot;-R/opt/local/lib -L/opt/local/lib -lssl -lcrypto $NGX_LIBDL&quot;</span><br><span class="line">          else</span><br><span class="line">              ngx_feature_libs=&quot;-L/opt/local/lib -lssl -lcrypto $NGX_LIBDL&quot;</span><br><span class="line">          fi</span><br><span class="line"></span><br><span class="line">          . auto/feature</span><br><span class="line">      fi</span><br><span class="line">if [ $ngx_found = no ]; then</span><br><span class="line"></span><br><span class="line">          # 自己添加的一个判断</span><br><span class="line"></span><br><span class="line">          ngx_feature=&quot;OpenSSL library in /root/nginx/openssl-OpenSSL_1_1_0f/bin/&quot;</span><br><span class="line">          ngx_feature_path=&quot;/root/nginx/openssl-OpenSSL_1_1_0f/bin/include&quot;</span><br><span class="line"></span><br><span class="line">          if [ $NGX_RPATH = YES ]; then</span><br><span class="line">              ngx_feature_libs=&quot;-R/root/nginx/openssl-OpenSSL_1_1_0f/bin/lib -L/root/nginx/openssl-OpenSSL_1_1_0f/bin/lib -lssl -lcrypto $NGX_LIBDL&quot;</span><br><span class="line">          else</span><br><span class="line">              ngx_feature_libs=&quot;-L/root/nginx/openssl-OpenSSL_1_1_0f/bin/lib -lssl -lcrypto $NGX_LIBDL&quot;</span><br><span class="line">          fi</span><br><span class="line"></span><br><span class="line">          . auto/feature</span><br><span class="line">      fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>回到nginx目录下，开始编译nginx。</p><blockquote><p>cd &#x2F;root&#x2F;nginx&#x2F;nginx-1.12.1&#x2F;</p><p><strong>.&#x2F;configure –prefix&#x3D;`pwd`&#x2F;bin –add-module&#x3D;&#x2F;root&#x2F;nginx&#x2F;nginx-rtmp-module-1.2.0</strong></p><p>make install</p></blockquote><p>之后会多一个bin目录就代表成功了，来到这个目录下的sbin执行</p><blockquote><p>.&#x2F;nginx</p></blockquote><p>如果碰到错误</p><blockquote><p>error while loading shared libraries:<br>libssl.so.1.1: cannot open shared object file: No such file or directory</p></blockquote><p>可以</p><blockquote><p>vim &#x2F;etc&#x2F;ld.so.conf</p><p>在其中加入</p><p>&#x2F;root&#x2F;nginx&#x2F;openssl-OpenSSL_1_1_0f&#x2F;bin&#x2F;lib</p></blockquote><p>然后执行 <code>Ldconfig</code>保存设置，在去配置一下服务器的入端口 1935 8080.</p><p>然后关闭nginx服务器，将nginx-rtmp-module&#x2F;test&#x2F;下的nginx.conf 复制到 nginx&#x2F;bin&#x2F;conf下面</p><p>修改一下 将路径都改为自己的rtmp-module的路径在重启就OK了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 流媒体服务器 ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程风格笔记</title>
      <link href="/2017/09/11/C++%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/09/11/C++%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><em>C</em>++编程风格笔记</p><blockquote><p><strong>定义函数时，参数顺序为：输入参数在前，输出参数在后。</strong></p></blockquote><p>C&#x2F;C++函数参数分为输入参数和输出参数两种，有时输入参数也会输出（值被修改时），输入参数一般传值或常数引用，输出参数或输入&#x2F;输出常数为<em>非常数指针</em>(non-const pointers)。对参数排序时，将所有输入参数置于输出参数之前。不要仅仅因为是新添加的参数，就将其置于最后，而应该依然置于输出参数之前。</p><hr><blockquote><p>包含文件的名称及次序</p></blockquote><p>将包含次序标准化可增强可读性丶避免隐藏依赖(<em>hidden dependencies， 隐藏依赖主要指包含的文件中编译时</em>)，次序如下：C库丶C++库丶其他库的.h丶项目内的.h。</p><p>项目内头文件应按照项目源代码目录树结构排序，并且避免使用UNIX文件路径。&#x2F;&#x2F;.(当前路径) ..（父路径）。&#x2F;&#x2F;例如，google-awesome-project&#x2F;src&#x2F;base&#x2F;logging.h应像这样被包含：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;base/logging.h&quot;</span></span></span><br></pre></td></tr></table></figure><span id="more"></span><p>dir&#x2F;foo.cc的主要作用是执行或测试dir2&#x2F;foo2.h的功能，foo.cc中包含头文件的次序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir2/foo2.h</span><br><span class="line">C系统文件</span><br><span class="line">C++系统文件</span><br><span class="line">其他库头文件</span><br><span class="line">本项目内头文件</span><br></pre></td></tr></table></figure><p>这种排序方式可有效减少隐藏依赖，我们希望每一个头文件都独立编译。最简单的实现方式是将其作为第一个.h文件包含在对应的.cc中。</p><p>dir&#x2F;foo.cc和 dir2&#x2F;foo2.h通常位于相同目录下（像base&#x2F;basictypes_unittest.cc和base&#x2F;basictypes.h），但也可在不同的目录下。</p><p><strong>相同目录下头文件按字母排序是不错的选择。</strong></p><p>举例来说，“google-awesome-project&#x2F;src&#x2F;foo&#x2F;internal&#x2F;fooserver.cc”的包含次序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;foo/public/fooserver.h&quot;   //优先位置</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;hash_map&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &quot;base/basictypes.h&quot;</span><br><span class="line">#include &quot;base/commandlineflags.h&quot;</span><br><span class="line">#include &quot;foo/public/bar.h&quot;</span><br></pre></td></tr></table></figure><h3 id="总结以上："><a href="#总结以上：" class="headerlink" title="总结以上："></a>总结以上：</h3><ol><li>避免多重包含是学编程时最基本的要求。</li><li>前置声明是为了降低编译依赖，防止修改一个头文件引发多米诺效应。</li><li>内联函数的合理使用可提高代码执行效率。</li><li>-inl.h 可提高代码可读性。</li><li>标准化函数参数顺序可以提高可读性和以易维护性(对函数参数的堆栈空间有轻微影响)</li><li>包含文件的名称使用.和..虽然方便却易混乱，使用比较完整的项目路径看上去很清晰丶很条理，包含文件的次序除了美观之外，最重要的是可以减少隐藏依赖，使每个头文件在“最需要编译”的地方编译(对应源文件处)，有人提出库文件放在最后，这样出错先是项目内的文件，头文件都放在对应源文件的最前面，这一点足以保证内部错误的即时发现了。</li></ol><hr><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><hr><p>将函数尽可能置于最小作用域内，在声明变量时将其初始化。</p><p>C++允许在函数的任何位置声明变量。提倡在尽可能小的作用域内声明变量，离第一次使用越近越好。这使得代码易于阅读，易于定位变量的声明位置丶变量类型和初始值。特别是，应使用初始化代替声明+赋值的方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i;</span><br><span class="line">i = f();     //坏 ---- 初始化和声明分离</span><br><span class="line">int j = g()；  //好------初始化时声明</span><br></pre></td></tr></table></figure><p><strong>注意：gcc可正确执行<em>for(int i &#x3D;0; i &lt; 10 ;++i)(i的作用域仅限for循环)</em>,因此其他for循环可重用i。if和 while 等语句中，作用域声明同样是正确的。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(const char* p= strchr(str, &#x27;/&#x27;)) str = p +1;</span><br></pre></td></tr></table></figure><p><strong>注意：如果变量是一个对象，每次进入作用域都要调用其构造函数，每次退出都要调用其析构函数。</strong></p><p>&#x2F;&#x2F;低效的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; 1000000; ++i) &#123;</span><br><span class="line">  Foo f;</span><br><span class="line">  f.DoSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似变量要放到循环作用域外面声明要高效的多：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Foo f;</span><br><span class="line">for (int i = 0; i &lt; 1000000; ++i) &#123;</span><br><span class="line">  f.DoSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><hr><p>class类型的全局变量是被禁止的，内建类型的全局变量是允许的，当然多线程代码中非常数全局变量也是被禁止的。永远不要使用函数返回值初始化全局变量。如果一定要使用class类型的全局变量，请使用单例模式(singleton pattern)。</p><p>对于全局的字符串常量，使用C风格的字符串，而不要使用STL的字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char kFrogSays[] = &quot;ribbet&quot;;</span><br></pre></td></tr></table></figure><p>虽然允许在全局作用域使用全局变量，但请三思。大多数全局变量应该是类的静态数据成员，或者当其只在.cc文件中使用时，将其定义到不具名命名空间中，或者使用静态关联以限制变量的作用域。</p><p><strong>记住，静态成员变量视作全局变量，所以也不能是class类型！！</strong></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>.cc文件中的不具名空间可避免命名冲突丶限定作用域，避免直接使用<strong>using</strong>提示符污染命名空间。</li><li>嵌套类符合局部使用原则，只是不能在其他头文件中前置声明，尽量不要<strong>public</strong>。</li><li>尽量不用全局函数和全局变量，考虑作用域和命名空间限制，尽量单独形成编译单元。</li><li>多线程中的全局变量(含静态成员变量)不要使用<strong>class</strong>类型(含<strong>STL</strong>容器)，避免不明确行为导致的<strong>bugs</strong>。</li><li>作用域的使用，除了考虑名称污染可读性之外，主要是为降低耦合度，提高编译丶执行效率。</li></ol><hr><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><hr><p>介绍类该做声明，不该做什么。</p><p>explicit: 明确的</p><p>implicit: 隐含的</p><p>trivial: 没有意义的</p><p>non-trivial: 有意义的</p><hr><p>#<strong>1.构造函数的职责</strong></p><p>构造函数中只进行那些没有实际意义的初始化(<strong>trivial，简单初始化对于程序执行没有实际的逻辑意义，因为成员变量的“有意义”的值大多不在构造函数中确定</strong>)，可能的话，使用Init()方法集中初始化为<strong>有意义的数据(non-trivial).</strong></p><p>定义：在构造函数中执行初始化操作。</p><p>优点：排版方便，无需担心类是否初始化。</p><p>缺点：在构造函数中执行操作引起的问题有：</p><ol><li>构造函数不易报告错误，不能使用异常</li><li>操作失败会造成对象初始化失败，引起不确定状态</li><li>构造函数内调用虚函数，调用不会派发到子类实现中，即时当前没有子类化实现，将来仍是隐患</li><li>如果有人创建该类型的全局变量，构造函数将在main()之前被调用，有可能破坏构造函数中暗含的假设条件</li></ol><p><strong>结论：如果对象需要有意义的(non-trivial)初始化，考虑使用另外的Init()方法并增加一个成员标志用于指示对象是否初始化成功。</strong></p><p>###2.默认构造函数</p><p>如果一个类定义了若干成员变量又没有其他构造函数，需要定义一个默认构造函数，否则编译器将自动生产默认构造函数。</p><blockquote><p><strong>定义：</strong>新建一个没有参数的对象时，默认构造函数被调用，当调用new[]（为数组）时，默认构造函数总是被调用。</p><p><strong>优点：</strong>默认将结构体初始化为“不可能的值。”，使调试更加容易。</p><p><strong>缺点：</strong>对代码编写者来说是多余的工作。</p></blockquote><p><strong>结论：</strong></p><p>如果类中定义了成员变量，没有提供其他构造函数，你需要定义一个默认构造函数(无参数)。默认构造函数更适合初始化对象，使对象内部状态(internal state)一致，有效。</p><p>提供默认构造函数的原因是：如果倪没有提供其他构造函数，又没有定义默认构造函数。编译器会自动生成一个，但编译器生成的构造函数不会对对象进行初始化。</p><p><strong>如果你定义的类继承现有类，而你又没有增加新的成员变量，则不需要为新类定义默认构造函数。</strong></p><p>###3.明确的构造函数(Explicit Constructors)</p><p>对单参数构造函数使用C++关键字explicit。</p><blockquote><p><strong>定义：</strong>只有一个参数的构造函数可被用于转换(只要指隐式转换)。例如，定义了Foo::Foo(string name),当向需要传入一个Foo对象的函数传入一个字符串时，构造函数Foo::Foo(string name)被调用并将该字符串转换为一个Foo临时对象传给调用函数。看上去方便，但是如果你并不希望通过转换生成一个新对象的话，麻烦也随着而来，为避免构造函数被调用造成隐式转换，可以将其声明为explicit。</p><p><strong>优点：</strong>避免不合时宜的转换</p><p><strong>缺点：</strong>无</p></blockquote><p><strong>结论</strong></p><p>所有单参数构造函数必须是明确的(explicit)。在类定义中，将关键字explicit加到单参数构造函数前：</p><p><code>explicit Foo(string name)</code></p><p><strong>例外：</strong>在少数情况下，拷贝构造函数可以不声明为explicit；特意作为其他类的透明包装器的类。</p><h3 id="4-拷贝构造函数"><a href="#4-拷贝构造函数" class="headerlink" title="4.拷贝构造函数"></a>4.拷贝构造函数</h3><p>仅在代码中需要拷贝一个类对象的时候使用拷贝构造函数；不需要拷贝时应使用DISALLOW_COPY_AND_ASSIGN。</p><blockquote><p><strong>定义：</strong>通过拷贝新建对象时可使用拷贝构造函数(特别是对象的传值时).</p><p><strong>优点：</strong>拷贝构造函数使得拷贝对象更加容易，STL容器要求所有内容可拷贝丶可赋值。</p><p><strong>缺点：</strong>C++中对象的隐式拷贝是导致很多性能问题和bugs的根源。拷贝构造函数降低了代码可读性，相比于按引用传递，跟踪按值传递的对象更加困难，对象修改的地方变得难以琢磨。</p></blockquote><p><strong>结论：</strong></p><p>大量的类并不需要可拷贝，也不需要一个拷贝构造函数或赋值操作。但不幸的是，你不主动声明他们，编译器会为你自动生成，而且是public。</p><p><strong>可以考虑在类的private中添加空的(dummy)拷贝构造函数和赋值操作，只有声明，没有定义。由于这些空程序声明为private，当其他代码视图使用他们时，编译器将报错，为了方便，可以使用宏定义DISALLOW_COPY_AND_ASSIGN。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//禁止使用拷贝构造函数和赋值操作的宏</span><br><span class="line">//应在类的private:中使用</span><br><span class="line">#define DISALLOW_COPY_AND_ASSIGN(TypeName) \</span><br><span class="line">TypeName(const TypeName&amp;);             \</span><br><span class="line">void operator = (const TypeName&amp;)</span><br><span class="line">class Foo &#123;</span><br><span class="line">  public:</span><br><span class="line">  Foo(int f);</span><br><span class="line">  ~Foo();</span><br><span class="line">  private:</span><br><span class="line">  DISALLOW_COPY_AND_ASSIGN(Foo);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如上所述，绝大多数情况应使用DISALLOW_COPY_AND_ASSIGN,如果类确实需要拷贝，应在该类的头文件中说明原由，并适当定义拷贝构造函数和赋值操作，注意在operator中检测自赋值(self-assignment)情况。</p><p>在将类作为STL容器值的时候，你可能有使类可拷贝的冲动。类似情况下，真正该做的是使用指针指向STL容器中的对象，可以考虑使用 <code>std::tr1::shared_ptr</code>.</p><h3 id="5-结构体和类（struct-vs-Classes）"><a href="#5-结构体和类（struct-vs-Classes）" class="headerlink" title="5.结构体和类（struct vs Classes）"></a>5.结构体和类（struct vs Classes）</h3><p>仅当只有数据时使用struct，其他一律使用class。</p><p>在C++中，关键字<strong>struct</strong>和<strong>class</strong>几乎含义等同，我们为其认为添加语义，以便为定义的数据类型合理选择使用哪个关键字。</p><p><strong>struct</strong>被用在仅包含数据的消极对象(passive objetcts)上，可能包括有关联的常量，但没有存取数据成员之外的函数功能，而存取功能通过直接访问实现而无需方法调用，这提到的方法是只用于处理数据成员的，如构造函数丶析构函数丶Initialize()丶Reset()丶Validate().</p><p>如果需要更多的函数功能，class更适合，<strong>如果不确定，直接使用class。</strong></p><p>如果与STL结合，对于仿函数(functors)和特性(traits)可以不用class而是使用struct。</p><h3 id="6-继承-inheritance"><a href="#6-继承-inheritance" class="headerlink" title="6.继承(inheritance)"></a>6.继承(inheritance)</h3><p>使用组合(composition)通常比继承更适宜，如果使用继承的话，只是用公共继承。</p><blockquote><p><strong>定义：</strong>当子类继承基类时，子类包含了父基类所有数据及操作的定义。C++中，继承主要用于两个场合：1.<strong>实现继承，子类继承父类的实现代码</strong>。2.<strong>接口继承，子类仅继承父类的方法名称</strong>。</p><p><strong>优点：</strong>实现继承通过原封不动的重用基类代码减少了代码量。由于继承是编译时声明，编码者和编译器都可以理解相应操作并发现错误。接口继承可用于程序上增强类的特定API的功能，在类没有定义API的必要实现时，编译器同样可以甄错。</p><p><strong>缺点：</strong>对于实现继承，由于实现子类的代码在父类和子类间延展，要理解其实现变得更加困难。子类不能重写父类的非虚函数，当然也就不能修改其实现。基类也可能定义一些数据成员，还要区分基类的物理轮廓(physical layout)。</p></blockquote><p><strong>结论：</strong></p><p>所有继承必须是public的，如果想私有继承的话，应该采取包含基类实例作为成员的方式作为替代。</p><p>不要过多实现继承，组合通常更合适一些。努力做到只在“是一个”的情况下使用继承；如果Bar的确是一种Foo，才令Bar是Foo的子类。</p><p><strong>必要的话，析构函数必须是virtual，必要是指，如果该类具有虚函数，其析构函数应该为虚函数。</strong></p><p>至于子类没有额外数据成员，父类也没有任何数据成员的特殊情况下，析构函数的调用是否必要是语义争论，从编程设计规范的角度看，在含有虚函数的父类中，定义虚函数绝对必要。</p><p>限定仅在子类访问的成员函数为protected，需要注意数据成员应该始终为私有。</p><p>当重定义派生的虚函数时，在派生类中明确声明其为virtual。根本原因：如果遗漏virtual，阅读者需要检索其所有祖先以确定该函数是否为虚函数。</p><h3 id="7-多重继承"><a href="#7-多重继承" class="headerlink" title="7.多重继承"></a>7.多重继承</h3><p>真正需要多重实现继承的时候非常少，只有当最多一个基类中含有实现，其他基类都是以Interface为后缀的纯接口类时才会使用多继承。</p><blockquote><p><strong>定义：</strong>多重继承允许子类拥有多个基类，要将作为纯接口的基类和具有实现的基类区别开来。</p><p><strong>优点：</strong>相比于单继承，多重实现继承可令你重用更多代码</p><p><strong>缺点：</strong>真正需要用到多重实现继承的时候非常少，多重实现继承看上去是不错的解决方案，通常可以找到更加明确丶清晰丶不同的解决方案</p></blockquote><p><strong>结论：</strong></p><p>只有当所有超类除第一个外都是纯接口时才能使用多重继承。为确保它们是纯接口，这些类必须以Interface为后缀。</p><h3 id="8-接口"><a href="#8-接口" class="headerlink" title="8.接口"></a>8.接口</h3><p>接口是指满足指定特定条件的类，这些类以interface为后缀(非必须)。</p><blockquote><p>当一个类满足以下条件时，称为纯接口：</p><ol><li>只有纯虚函数(“&#x3D;0”)和静态函数(下文提到的析构函数除外)。</li><li>没有非静态数据成员。</li><li>没有定义任何构造函数。如果有也不含参数，并且为protected。</li><li>如果是子类，也只能继承满足以上条件并以interface为后缀的类。</li></ol></blockquote><p>接口类不能被直接实例化，因为它声明了纯虚函数。为确保接口类的所有实现可被正确销毁，必须为之声明虚析构函数(作为第一条的例外，析构函数不可能为纯虚函数)。</p><blockquote><p><strong>优点：</strong>以interface为后缀可令他人知道不能为该接口类增加实现函数或非静态数据成员，这一点对多重继承尤其重要</p><p><strong>缺点：</strong>interface后缀增加了类名长度，为阅读和理解带来不变，接口特性作为实现细节不应暴露给客户。</p></blockquote><p><strong>结论：</strong></p><p>只有在满足上述需要时，类才以interface结尾，但反过来满足上述需要的类未必一定以interface结尾。</p><h3 id="9-操作符重载"><a href="#9-操作符重载" class="headerlink" title="9.操作符重载"></a>9.操作符重载</h3><p><strong>除少数特定环境外，不要重载操作符。</strong></p><blockquote><p><strong>定义：</strong>一个类可以定义诸如 + 丶&#x2F;等操作符，使其可以像内建类型一样直接使用。</p><p><strong>优点：</strong>是代码看上去更加直观，就像内建类型(如<strong>int</strong>)那样，重载操作符使那些equal丶add等暗淡无关的函数名好玩多了。为了使一些模板函数正确工作，可能需要定义操作符。</p><p><strong>缺点：</strong>虽然操作符重载令代码更加直观，但也有一些不足。</p><ol><li>混淆直觉，让你误以为一些耗时操作像内建操作那样轻巧</li><li>查找重载操作符的调用处更加困难，查找equal显然比同等调用&#x3D;&#x3D;容易的多。</li><li>有的操作符可以对指针进行操作，容易导致bugs丶Foo+4 做的是一件事，而&amp;Foo+4 可能做的是完全不同的另一件事，对于二者，编译器都不会报错，使其很难调试。</li><li>重载还有令你吃惊的副作用，比如重载操作符**&amp;**的类不能被前置声明。</li></ol></blockquote><p><strong>结论：</strong></p><p>一般不要重载操作符，尤其是赋值操作(operator&#x3D;&#x3D;)比较阴险，应避免重载，需要的话可以定义类似equal丶copyFrom等函数。</p><p>然而，极少数情况下需要重载操作符以便与模板或“标准”C++类衔接(operator&lt;&lt;(ostream&amp;,const T&amp;)),如果被证明是正当的尚可接受，但你要尽可能避免这样做尤其是不要仅仅为了在STL容器中作为key使用就重载operator&#x3D;&#x3D;或operator&lt;，取而代之，你应该在声明容器的时候，创建相等判断和大小比较的仿函数类型。</p><p>有些STL算法确实需要重载operator&#x3D;&#x3D;时可以这么做，不要忘了提供文档说明原因。</p><p>参考拷贝构造函数和函数重载。</p><h3 id="10-存取控制"><a href="#10-存取控制" class="headerlink" title="10.存取控制"></a>10.存取控制</h3><p>将数据成员私有化，并提供相关存取函数，如定义变量foo_及取值函数foo()丶赋值函数set_foo().</p><p>存取函数的定义一般内联在头文件中。</p><p>参考继承和函数命名。</p><h3 id="11-声明次序"><a href="#11-声明次序" class="headerlink" title="11.声明次序"></a>11.声明次序</h3><p>在类中使用特定的声明次序：public:在private:之前，成员函数在数据成员(变量)前。</p><p><strong>定义次序如下：public:丶protected:丶private:.</strong></p><p>每一块中，声明次序一般如下：</p><ol><li>typedefs和enums；</li><li>常量</li><li>构造函数</li><li>析构函数</li><li>成员函数，含静态函数</li><li>数据成员，含静态数据成员</li></ol><p>宏DISALLOW_COPY_AND_ASSIGN置于private:块之后，作为类的最后部分。参考拷贝构造函数。</p><p>.cc文件中函数的定义应尽可能和声明次序一致。</p><p>不要将大型函数内联到类的定义中，只有那些没有特定意义的或者性能要求高的，并且是比较短小的函数才能被定义为内联函数。</p><h2 id="关于类的结论"><a href="#关于类的结论" class="headerlink" title="关于类的结论"></a>关于类的结论</h2><ul><li>不在构造函数内做太多关于逻辑的初始化</li><li>编译器提供的默认构造函数不会对变量进行初始化，如果定义了其他构造函数，编译器不再提供，需要编码者自行提供默认构造函数</li><li>为避免隐式转换，须将单参数构造函数声明为explicit</li><li>为避免拷贝构造函数丶赋值操作的滥用和编译器自动生成，可目前声明其为<strong>private</strong>且无需实现</li><li>仅在作为数据集合时使用struct</li><li>组合 &gt; 实现继承 &gt; 接口继承 &gt;私有继承，子类重载的虚函数也要声明virtual关键字，虽然编译器允许不这样做</li><li>避免使用多重继承，使用时，除一个基类含有实现外，其他基类均为纯接口</li><li>接口类类名以interface为后缀，除提供带实现的虚析构函数丶静态成员函数外，其他均为纯虚函数，不定义非静态数据成员，不提供构造函数，提供的话，声明为protected</li><li>为降低复杂性，尽量不重载操作符，模板丶标准类中使用时提供文档说明</li><li>存取函数一般内联在头文件中</li><li>声明次序：<strong>public-&gt;protected-&gt;private</strong></li><li>函数体尽量短小丶紧凑，功能单一</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mrak message parts that should not be translated</title>
      <link href="/2017/07/05/Mrak-message-parts-that-should-not-be-translated/"/>
      <url>/2017/07/05/Mrak-message-parts-that-should-not-be-translated/</url>
      
        <content type="html"><![CDATA[<p>好久没写博客了，最佳一直在看官网的training啊，突然看到一个奇怪的东西，没错就是标题的那个东西，官网是这样子介绍的：</p><blockquote><p>Often strings contain contain text that should not be translated into other languages. Common examples might be a piece of code, a placeholder for a value, a special symbol, or a name. As you prepare your strings for translation, look for and mark text that should remain as-is, without translation, so that the translator doesn’t change it.</p></blockquote><p>这几句话大家应该都能看得懂，大概意思就是不让字符串中的代码，占位符，特殊标识或者名字什么的被翻译，而你就要控制他们不被改变。我其实看完有点无语，意思很明显，但是我看不懂啊，于是我把它的示例的string资源打印了一下看看是什么效果(我也是很无聊的)：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;string name=<span class="string">&quot;countdown&quot;</span>&gt;</span><br><span class="line">  &lt;xliff:g id=<span class="string">&quot;time&quot;</span> example=<span class="string">&quot;5 days&gt;%2$8s&lt;/xliff:g&gt; until holiday</span></span><br><span class="line"><span class="string">&lt;/string&gt;</span></span><br></pre></td></tr></table></figure><p>就是上面这段资源，粘贴到string.xml里面，然后在java中代码动态改变值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv.text(resources.getString(R.string.countdown, <span class="string">&quot;shark&quot;</span>, <span class="string">&quot;louis&quot;</span>))</span><br></pre></td></tr></table></figure><p>对了上面这是<strong>Kotlin</strong>的写法，最近也是在学习这一门大热的语言，这不是重点啊，让我们看看打印的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">louis until holiday</span><br></pre></td></tr></table></figure><p>看到没有，我也是试了几下才知道的，**%2$8s<strong>你们猜到什么意思了吧，没错，2表示的是getString后面的可变参数的位置，意思就是从id后面数起的第二个取代这个占位符，而</strong>$8s**则表示前面8个空格，并且是字符串</p><blockquote><p>属性id可以随便命名<br>属性example表示举例说明，可以省略<br>%n$ms：代表输出的是字符串，n代表是第几个参数，设置m的值可以在输出之前放置空格<br>%n$md：代表输出的是整数，n代表是第几个参数，设置m的值可以在输出之前放置空格，也可以设为0m,在输出之前放置m个0<br>%n$mf：代表输出的是浮点数，n代表是第几个参数，设置m的值可以控制小数位数，如m&#x3D;2.2时，输出格式为00.00</p></blockquote><p>贴出官方说法。</p><p>注意在String.xml中加命名空间<code>&lt;resources xmlns:xliff=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;&gt;</code></p><p>以上。。</p><hr><p>在这其中我发现了一个方法<strong>getQuantityString</strong></p><p>这个和上面那个很像啊有木有，于是我查了一下资料发现这是对不同语言的单复数的定义不同时的写法，对某些语言的特殊写法吧，这个得和你们的翻译人员问问了。</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">zero</td><td align="center">语言需要对数字0进行特殊处理。（比如阿拉伯语）</td></tr><tr><td align="center">one</td><td align="center">语言需要对类似1的数字进行特殊处理。（比如英语和其它大多数语言里的1；在俄语里，任何以1结尾但不以11结尾的数也属于此类型。）</td></tr><tr><td align="center">two</td><td align="center">语言需要对类似2的数字进行特殊处理。（比如威尔士语）</td></tr><tr><td align="center">few</td><td align="center">语言需要对较小数字进行特殊处理（比如捷克语里的2、3、4；或者波兰语里以2、3、4结尾但不是12、13、14的数。）</td></tr><tr><td align="center">many</td><td align="center">语言需要对较大数字进行特殊处理（比如马耳他语里以11-99结尾的数）</td></tr><tr><td align="center">other</td><td align="center">语言不需要对数字进行特殊处理。</td></tr></tbody></table><p>看到这个表格我在试一试呗。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;plurals name=<span class="string">&quot;subtitle_plural&quot;</span>&gt;</span><br><span class="line">    &lt;item quantity=<span class="string">&quot;one&quot;</span>&gt;one crime&lt;/item&gt;</span><br><span class="line">    &lt;item quantity=<span class="string">&quot;other&quot;</span>&gt;%<span class="number">1</span>$s crimes&lt;/item&gt;</span><br><span class="line">&lt;/plurals&gt;</span><br></pre></td></tr></table></figure><p>在activity中这样写，对比一下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tv.append(resources.getQuantityString(R.plurals.subtitle_plural, <span class="number">3</span>, <span class="number">3</span>).toString() + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">tv.append(resources.getQuantityString(R.plurals.subtitle_plural, <span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> crimes</span><br><span class="line">one crime</span><br></pre></td></tr></table></figure><p>看到这里你也应该明白了，这次的博客内容就这些了，谢谢大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 官网Guide </tag>
            
            <tag> 本地化资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AppCompatActivity的作用分析</title>
      <link href="/2017/06/23/AppCompatActivity%E7%9A%84%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/"/>
      <url>/2017/06/23/AppCompatActivity%E7%9A%84%E4%BD%9C%E7%94%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="AppCompatActivity的作用分析"><a href="#AppCompatActivity的作用分析" class="headerlink" title="AppCompatActivity的作用分析"></a>AppCompatActivity的作用分析</h1><hr><p>对于v7包下的AppCompatActivity，我是比较晚入的android(并不知道是不是坑)，所以一开始就用的as创建项目就很奇怪为什么我的activity自动继承了AppCompatActivity，不是应该继承Activity吗？Ecm？我仿佛感觉受到了欺骗，于是就对其进行了研究(就是看源码拉)。(因为当时是边看边解析边写的，所以思路可能有点乱，自己再看一遍源码更好，也是学习的一部分)</p><p>一开始我就发现了v4 v7 v13等等的support库，然后发现这些库是用来解决兼容问题的，数字分别对应了android的API版本，即分别适配android版本4，7，13以上的app。看完之后发现google程序员为了适配也是良苦用心啊。</p><span id="more"></span><blockquote><p>从AppCompatActivity源码的onCreate看到这个类初始化的第一步就调用了getDelegate获得了一个代理，并且你会发现下面所有的生命周期的方法都交由这个代理类来实现了，那么这个东西是什么呢？其实就是AppCompatDelegate这个抽象类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">AppCompatDelegate</span> <span class="variable">delegate</span> <span class="operator">=</span> getDelegate();</span><br><span class="line">     delegate.installViewFactory();</span><br><span class="line">     delegate.onCreate(savedInstanceState);</span><br><span class="line">     <span class="keyword">if</span> (delegate.applyDayNight() &amp;&amp; mThemeId != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// If DayNight has been applied, we need to re-apply the theme for</span></span><br><span class="line">         <span class="comment">// the changes to take effect. On API 23+, we should bypass</span></span><br><span class="line">         <span class="comment">// setTheme(), which will no-op if the theme ID is identical to the</span></span><br><span class="line">         <span class="comment">// current theme ID.</span></span><br><span class="line">         <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">             onApplyThemeResource(getTheme(), mThemeId, <span class="literal">false</span>);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             setTheme(mThemeId);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> The &#123;<span class="doctag">@link</span> AppCompatDelegate&#125; being used by this Activity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line"> <span class="keyword">public</span> AppCompatDelegate <span class="title function_">getDelegate</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (mDelegate == <span class="literal">null</span>) &#123;</span><br><span class="line">         mDelegate = AppCompatDelegate.create(<span class="built_in">this</span>, <span class="built_in">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mDelegate;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>那么<code>AppCompatDelegate</code>这个类到底做了什么呢？点进去看这个create方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> AppCompatDelegate <span class="title function_">create</span><span class="params">(Activity activity, AppCompatCallback callback)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> create(activity, activity.getWindow(), callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AppCompatDelegate <span class="title function_">create</span><span class="params">(Context context, Window window,</span></span><br><span class="line"><span class="params">        AppCompatCallback callback)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">sdk</span> <span class="operator">=</span> Build.VERSION.SDK_INT;</span><br><span class="line">    <span class="keyword">if</span> (BuildCompat.isAtLeastN()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppCompatDelegateImplN</span>(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppCompatDelegateImplV23</span>(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">14</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppCompatDelegateImplV14</span>(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sdk &gt;= <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppCompatDelegateImplV11</span>(context, window, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppCompatDelegateImplV9</span>(context, window, callback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是感觉这些名字有点熟悉呢。</p><blockquote><p>这个方法返回了一些根据版本号的实现类。</p></blockquote><p>下面我将给出这个抽象类的类之间的继承关系：</p><p><img src="/../../../../asset/img/delegate%E7%9A%84%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%9B%BE.png"></p><blockquote><p>在as 中使用ctrl + H的快捷键可以很快的看到类之间的继承图。</p></blockquote><p>发现他们之间相互继承，于是开始看V9的源码，找到了一个可疑的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这个方法会(invoke) &#123;当我们使用自己的layoutInflater的factory的时候&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">createView</span><span class="params">(View parent, <span class="keyword">final</span> String name, <span class="meta">@NonNull</span> Context context,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isPre21</span> <span class="operator">=</span> Build.VERSION.SDK_INT &lt; <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mAppCompatViewInflater == <span class="literal">null</span>) &#123;</span><br><span class="line">            mAppCompatViewInflater = <span class="keyword">new</span> <span class="title class_">AppCompatViewInflater</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We only want the View to inherit its context if we&#x27;re running pre-v21</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">inheritContext</span> <span class="operator">=</span> isPre21 &amp;&amp; shouldInheritContext((ViewParent) parent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mAppCompatViewInflater.createView(parent, name, context, attrs, inheritContext,</span><br><span class="line">                isPre21, <span class="comment">/* Only read android:theme pre-L (L+ handles this anyway) */</span></span><br><span class="line">                <span class="literal">true</span>, <span class="comment">/* Read read app:theme as a fallback at all times for legacy reasons */</span></span><br><span class="line">                VectorEnabledTintResources.shouldBeUsed() <span class="comment">/* Only tint wrap the context if enabled */</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">installViewFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LayoutInflater</span> <span class="variable">layoutInflater</span> <span class="operator">=</span> LayoutInflater.from(mContext);</span><br><span class="line">        <span class="keyword">if</span> (layoutInflater.getFactory() == <span class="literal">null</span>) &#123;</span><br><span class="line">            LayoutInflaterCompat.setFactory(layoutInflater, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(LayoutInflaterCompat.getFactory(layoutInflater)</span><br><span class="line">                    <span class="keyword">instanceof</span> AppCompatDelegateImplV9)) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;The Activity&#x27;s LayoutInflater already has a Factory installed&quot;</span></span><br><span class="line">                        + <span class="string">&quot; so we can not install AppCompat&#x27;s&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>突然想起来一句话，兼容问题其实就是着色问题，AppCompatDelegate 的工作就是涂色。发现这个方法在AppCompatDelegate里面定义的，别问我怎么找到的，你在V9这个类看到1000多行代码的时候找到了，然后我跑回去看AppCompatDelegate这个类里面的方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Installs AppCompat&#x27;s &#123;<span class="doctag">@link</span> android.view.LayoutInflater&#125; Factory so that it can replace</span></span><br><span class="line"><span class="comment">  * the framework widgets with compatible tinted versions. This should be called before</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@code</span> super.onCreate()&#125; as so:</span></span><br><span class="line"><span class="comment">  * &lt;pre class=&quot;prettyprint&quot;&gt;</span></span><br><span class="line"><span class="comment">  * protected void onCreate(Bundle savedInstanceState) &#123;</span></span><br><span class="line"><span class="comment">  *     getDelegate().installViewFactory();</span></span><br><span class="line"><span class="comment">  *     getDelegate().onCreate(savedInstanceState);</span></span><br><span class="line"><span class="comment">  *     super.onCreate(savedInstanceState);</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *     // ...</span></span><br><span class="line"><span class="comment">  * &#125;</span></span><br><span class="line"><span class="comment">  * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">  * If you are using your own &#123;<span class="doctag">@link</span> android.view.LayoutInflater.Factory Factory&#125; or</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> android.view.LayoutInflater.Factory2 Factory2&#125; then you can omit this call, and instead call</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> #createView(android.view.View, String, android.content.Context, android.util.AttributeSet)&#125;</span></span><br><span class="line"><span class="comment">  * from your factory to return any compatible widgets.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">installViewFactory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * This should be called from a</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> android.view.LayoutInflater.Factory2 LayoutInflater.Factory2&#125; in order</span></span><br><span class="line"><span class="comment">  * to return tint-aware widgets.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * This is only needed if you are using your own</span></span><br><span class="line"><span class="comment">  * &#123;<span class="doctag">@link</span> android.view.LayoutInflater LayoutInflater&#125; factory, and have therefore not</span></span><br><span class="line"><span class="comment">  * installed the default factory via &#123;<span class="doctag">@link</span> #installViewFactory()&#125;.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> View <span class="title function_">createView</span><span class="params">(<span class="meta">@Nullable</span> View parent, String name, <span class="meta">@NonNull</span> Context context,</span></span><br><span class="line"><span class="params">         <span class="meta">@NonNull</span> AttributeSet attrs)</span>;</span><br></pre></td></tr></table></figure><p>看到上面的注释我突然顿悟了，找了半天的在哪里设置的layoutInflater的factory，原来是这样子，于是又去AppCompatActivity瞅了一眼：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    final AppCompatDelegate delegate = getDelegate();</span><br><span class="line">    delegate.installViewFactory();</span><br><span class="line">    delegate.onCreate(savedInstanceState);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现onCreate方法里果然有这句话，installViewFactory()；这个方法就是给The Activity’s LayoutInflater设置一个自己的factory，于是就会调用createView这个方法</p></blockquote><p><strong>注意</strong>createView里面的这句话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> mAppCompatViewInflater.createView(parent, name, context, attrs, inheritContext,</span><br><span class="line">              isPre21, <span class="comment">/* Only read android:theme pre-L (L+ handles this anyway) */</span></span><br><span class="line">              <span class="literal">true</span>, <span class="comment">/* Read read app:theme as a fallback at all times for legacy reasons */</span></span><br><span class="line">              VectorEnabledTintResources.shouldBeUsed() <span class="comment">/* Only tint wrap the context if enabled */</span></span><br><span class="line">      );</span><br></pre></td></tr></table></figure><p>于是跑到AppCompatViewInflater的createView方法看，终于找到了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// We need to &#x27;inject&#x27; our tint aware Views in place of the standard framework versions</span></span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TextView&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatTextView</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ImageView&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatImageView</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Button&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatButton</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;EditText&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatEditText</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Spinner&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatSpinner</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ImageButton&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatImageButton</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;CheckBox&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatCheckBox</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;RadioButton&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatRadioButton</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;CheckedTextView&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatCheckedTextView</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;AutoCompleteTextView&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatAutoCompleteTextView</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;MultiAutoCompleteTextView&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatMultiAutoCompleteTextView</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;RatingBar&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatRatingBar</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;SeekBar&quot;</span>:</span><br><span class="line">                view = <span class="keyword">new</span> <span class="title class_">AppCompatSeekBar</span>(context, attrs);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>原来在activity的oncreate一开始创建的时候，系统就自动帮我们把这些<em>色调</em>给我们换掉了所以你写在XML的控件，都会被换成AppCompat开头的兼容性的控件，当然前提是你要继承AppCompatActivity，这就是系统为我们所做的适配了，请注意，AppCompatViewInflater也给我们提供了一个热换肤的思路，下次有时间再说吧。</p><p>总结起来，这个兼容其实就是<strong>偷梁换柱</strong>，而且看源码一定不能被细枝末节影响，像我一样，如果我能做点笔记，而不是草率的开始，应该过程会更加的轻松。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动冲突的解决方式</title>
      <link href="/2017/06/14/%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
      <url>/2017/06/14/%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>外部拦截法</strong></p><p>即指点击事件都先经过父容器的拦截处理，如果父容器需要此事件就拦截，如果不需要此事件就不拦截，这样就可以解决滑动冲突的问题，这种方法比较符合点击事件的分发机制。外部拦截法要重写父容器的onInterceptTouchEvent方法，并在内部做相应的拦截。伪代码如下：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">intercepted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) ev.getX();</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) ev.getY();</span><br><span class="line">    <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            intercepted = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="keyword">if</span> (父容器需要当前点击事件)&#123;</span><br><span class="line">                intercepted = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                intercepted = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            intercepted = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mLastXIntercept = x;</span><br><span class="line">    mLastYIntercept = y;</span><br><span class="line">    <span class="keyword">return</span> intercepted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是外部拦截法的典型逻辑，针对不同的滑动冲突，只需要修改父容器需要当前点击事件这个条件即可，其他均不需并且也不能修改。</p><p>对上述代码进行讲解：</p></li></ol><p>​    ACTION_DOWN事件返回false，因为父容器拦截了down事件，后续的action_move和action_up事件都会直接    交由父容器处理，事件无法传递给子元素.<br>​    ACTION_MOVE事件，可以根据需要来决定是否拦截，如果父容器拦截就返回true，不拦截就返回false。<br>​    ACTION_UP事件，必须返回false，因为up事件本身并没有多大的意义。</p><p>   考虑一种情况，假设事件交由子元素处理，如果父容器在ACTION_UP时返回了true，就会导致子元素无法接收到ACTION_UP事件，这个时候子元素中的onclick事件就无法触发，但是父容器比较特殊，一旦它开始拦截任何一个事件，那么后续的事件都会交由它来处理，而ACTION_UP作为最后一个事件也必定可以传递给父容器，即使父容器的onInterceptTouchEvent方法在ACTION_UP时返回了false.</p><ol start="2"><li><p><strong>内部拦截法</strong></p><p>内部拦截法是指父容器不拦截任何事件，所有的事件都传递给子元素，如果子元素需要此事件就直接消耗掉，否则就交由父容器进行处理，这种方法和android中的事件分发机制就不一样，需要配合<code>requestDisallowInterceptTouchEvent</code>方法才能正常工作，使用起来比外部拦截法稍显复杂。伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) event.getX();</span><br><span class="line">    <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) event.getY();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            parent.requestDisallowInterceptTouchEvent(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="type">int</span> <span class="variable">deltaX</span> <span class="operator">=</span> x - mLastX;</span><br><span class="line">            <span class="type">int</span> <span class="variable">deltaY</span> <span class="operator">=</span> y - mLastY;</span><br><span class="line">            <span class="keyword">if</span> (父容器需要此类点击事件) &#123;</span><br><span class="line">                parent.requestDisallowInterceptTouchEvent(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mLastX = x;</span><br><span class="line">    mLastY = y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.dispatchTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是内部拦截法的典型代码，当面对不同的滑动策略时只需要修改里面1的条件即可，其他不需要做改动也不需要做改动。除了子元素需要做处理以外，父元素也要默认拦截除了ACTION_DOWN以外的其他事件，这样当子元素调用parent.requestDisallowInterceptTouchEvent(false)方法时，父元素才能继续拦截所需的事件。</p><p>为什么父容器不能拦截ACTION_DOWN事件呢，因为这个事件不受FLAG_DISALLOW_INTERCEPT这个标记位的控制，所以一旦父容器拦截ACTION_DOWN事件了，那么所有的事件都无法传递到子元素去，这样内部拦截法就无法起作用了。</p><p>父元素的修改如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getAction();</span><br><span class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 自定义view </tag>
            
            <tag> 滑动冲突 </tag>
            
            <tag> 事件分发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SVG来实现复杂的自定义View</title>
      <link href="/2017/06/02/%E4%BD%BF%E7%94%A8SVG%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
      <url>/2017/06/02/%E4%BD%BF%E7%94%A8SVG%E6%9D%A5%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89View/</url>
      
        <content type="html"><![CDATA[<p>最近发现可以用SVG来实习非常复杂的自定义View，可以说是非常的厉害了。只要你看到不想做的很复杂的设计图，你就让美工妹子给你来一张SVG吧，还可以趁机和她聊下天。</p><p>我们就来画一个<strong>可交互</strong>的中国台湾地图吧，首先我们来理一下做这种自定义View的步骤。</p><blockquote><ol><li>下载含有中国地图的  SVG </li><li>用**<a href="http://inloop.github.io/svg2android/">此</a> **网站 将svg资源转换成相应的 Android代码</li><li>利用Xml解析SVG的代码  封装成javaBean   最重要的得到Path</li><li>重写OnDraw方法  利用Path绘制中国地图</li><li>重写OnTouchEvent方法，记录手指触摸位置，判断这个位置是否坐落在某个省份上</li></ol></blockquote><p>对了，地图资源可以在**<a href="https://www.amcharts.com/dl/javascript-maps/">这里</a> **下载。开始写代码吧。</p><p><a href="https://github.com/LouisShark/LouisMap">项目地址</a>点这里可以看源码。</p><p>前两步不需要我如何说了吧，可以把转化后的android代码，放入res&#x2F;raw目录下，接下来开始第三步：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseXMLWithPull</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           inputStream = context.getResources().openRawResource(R.raw.taiwanhigh);</span><br><span class="line">           <span class="type">XmlPullParserFactory</span> <span class="variable">factory</span> <span class="operator">=</span> XmlPullParserFactory.newInstance();</span><br><span class="line">           factory.setNamespaceAware(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">XmlPullParser</span> <span class="variable">xmlPullParser</span> <span class="operator">=</span> factory.newPullParser();</span><br><span class="line">           xmlPullParser.setInput(inputStream, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">eventType</span> <span class="operator">=</span> xmlPullParser.getEventType();</span><br><span class="line">           <span class="type">ProvinceItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">nodeName</span> <span class="operator">=</span> xmlPullParser.getName();</span><br><span class="line">               <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">                   <span class="comment">//开始解析某个节点</span></span><br><span class="line">                   <span class="keyword">case</span> XmlPullParser.START_DOCUMENT:</span><br><span class="line">                       itemList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> XmlPullParser.START_TAG:</span><br><span class="line">                       <span class="keyword">if</span> (<span class="string">&quot;path&quot;</span>.equals(nodeName)) &#123;</span><br><span class="line">                           <span class="type">String</span> <span class="variable">pathData</span> <span class="operator">=</span> xmlPullParser.getAttributeValue(<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>, <span class="string">&quot;pathData&quot;</span>);</span><br><span class="line">                           <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> PathParser.createPathFromPathData(pathData);</span><br><span class="line">                           item = <span class="keyword">new</span> <span class="title class_">ProvinceItem</span>(path);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">case</span> XmlPullParser.END_TAG:</span><br><span class="line">                       <span class="keyword">if</span> (nodeName.equalsIgnoreCase(<span class="string">&quot;path&quot;</span>) &amp;&amp; item != <span class="literal">null</span>) &#123;</span><br><span class="line">                           <span class="keyword">assert</span> itemList != <span class="literal">null</span>;</span><br><span class="line">                           itemList.add(item);</span><br><span class="line">                           item = <span class="literal">null</span>;</span><br><span class="line">                           handler.sendEmptyMessage(PARSE_END);</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   <span class="keyword">default</span>:</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               eventType = xmlPullParser.next();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   inputStream.close();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>xml解析写的非常随便，如果有需要修改的请自行修改，这里主要的是将解析出来的path标签下的pathData，然后使用封装好的PathParser(这个类大家可以自己去搜索下载)来将pathData封装成path，然后将path传入ProvinceItem类生成java bean类。下面我们来看一下这个Bean类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 路径</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> Path path;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 绘制颜色</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> drawColor;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ProvinceItem</span><span class="params">(Path path)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.path = path;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 自绘</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> paint</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> isSelect</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(Canvas canvas, Paint paint, <span class="type">boolean</span> isSelect)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (isSelect) &#123;</span><br><span class="line">         <span class="comment">//绘制背景</span></span><br><span class="line">         paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line">         paint.setColor(Color.BLACK);</span><br><span class="line">         paint.setStyle(Paint.Style.FILL);</span><br><span class="line">         paint.setShadowLayer(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0xffffffff</span>);</span><br><span class="line">         canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//绘制省份</span></span><br><span class="line">         paint.clearShadowLayer();</span><br><span class="line">         paint.setColor(drawColor);</span><br><span class="line">         paint.setStyle(Paint.Style.FILL);</span><br><span class="line">         paint.setStrokeWidth(<span class="number">2</span>);</span><br><span class="line">         canvas.drawPath(path, paint);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//没有被选择的时候绘制内容</span></span><br><span class="line">         paint.clearShadowLayer();</span><br><span class="line">         paint.setColor(drawColor);</span><br><span class="line">         paint.setStyle(Paint.Style.FILL);</span><br><span class="line">         paint.setStrokeWidth(<span class="number">1</span>);</span><br><span class="line">         canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//选择的时候绘制边界线</span></span><br><span class="line">         paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">         paint.setColor(<span class="number">0XFFEEEEEE</span>);</span><br><span class="line">         canvas.drawPath(path, paint);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 判断是否点击了省份</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTouch</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">     <span class="type">RectF</span> <span class="variable">rectF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RectF</span>();</span><br><span class="line">   <span class="comment">//就是用path的四个点生成一个rectf</span></span><br><span class="line">     path.computeBounds(rectF, <span class="literal">true</span>);</span><br><span class="line">     <span class="type">Region</span> <span class="variable">region</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Region</span>();</span><br><span class="line">     <span class="comment">//setPath 就是用path在region里面剪切出一个区域</span></span><br><span class="line">     region.setPath(path, <span class="keyword">new</span> <span class="title class_">Region</span>((<span class="type">int</span>) rectF.left, (<span class="type">int</span>) rectF.top, (<span class="type">int</span>) rectF.right, (<span class="type">int</span>) rectF.bottom));</span><br><span class="line">     <span class="keyword">return</span> region.contains(x, y);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个类主要就是两个方法，draw方法和isTouch方法，下面来说这两个方法的作用：</p><blockquote><h4 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h4><p>draw方法主要是传递三个参数来进行自绘：</p><ul><li>canvas 画板</li><li>paint 画笔</li><li>isSelect 是否被选中</li></ul><p>因为这个方法用来处理被点击时界面的变化，未选中和被选中的效果是不一样的。</p><p>此处可以自己来随便写。</p><h4 id="isTouch"><a href="#isTouch" class="headerlink" title="isTouch"></a>isTouch</h4><p>这个方法判断这个区域是否被选中，当然也可以有其他的方法来判断是否被点击，这里提供一种思路，主要是region里面的setPath方法，我们点进去源码看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the region to the area described by the path and clip.</span></span><br><span class="line"><span class="comment"> * Return true if the resulting region is non-empty. This produces a region</span></span><br><span class="line"><span class="comment"> * that is identical to the pixels that would be drawn by the path</span></span><br><span class="line"><span class="comment"> * (with no antialiasing).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setPath</span><span class="params">(Path path, Region clip)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nativeSetPath(mNativeRegion, path.readOnlyNI(), clip.mNativeRegion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概的意思就是用这个path在region裁剪出一个region，这个区域就是省份的区域，是不规则的。</p></blockquote><p>解析完了之后就是第四步了，重写ondraw。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas canvas)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDraw(canvas);</span><br><span class="line">    <span class="keyword">if</span> (itemList != <span class="literal">null</span>) &#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.scale(SCALE_FATOR, SCALE_FATOR);</span><br><span class="line">        <span class="keyword">for</span> (ProvinceItem item : itemList) &#123;</span><br><span class="line">            <span class="comment">//绘制未被选中</span></span><br><span class="line">            <span class="keyword">if</span> (item != selectedItem) &#123;</span><br><span class="line">                item.draw(canvas, paint, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//绘制选择的</span></span><br><span class="line">        <span class="keyword">if</span> (selectedItem != <span class="literal">null</span>) &#123;</span><br><span class="line">            selectedItem.draw(canvas, paint, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是很简单的绘制。</p><p>第五步。重写onTouchEvent方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">       <span class="comment">//将事件转交</span></span><br><span class="line">       <span class="keyword">return</span> gestureDetectorCompat.onTouchEvent(event);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">       gestureDetectorCompat = <span class="keyword">new</span> <span class="title class_">GestureDetectorCompat</span>(context, <span class="keyword">new</span> <span class="title class_">GestureDetector</span>.SimpleOnGestureListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onDown</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">               handlerTouch(e.getX(), e.getY());</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">super</span>.onDown(e);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理触摸事件的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlerTouch</span><span class="params">(<span class="type">float</span> x, <span class="type">float</span> y)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (itemList != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">ProvinceItem</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">for</span> (ProvinceItem item : itemList) &#123;</span><br><span class="line">               <span class="comment">//要除以一个放大系数</span></span><br><span class="line">               <span class="keyword">if</span> (item.isTouch((<span class="type">int</span>) (x / SCALE_FATOR), (<span class="type">int</span>) (y / SCALE_FATOR))) &#123;</span><br><span class="line">                   temp = item;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">               selectedItem = temp;</span><br><span class="line">               Toast.makeText(context, <span class="string">&quot;You click me OVO&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               postInvalidate();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>主要就是将down事件转交给gestureDetector来处理，然后写了处理触摸的方法，注意判断点击的xy值需要除以一个放大系数，因为前面放大了canvas，不然会点不到。</p><p><strong>好了，以上就是主要的内容了，有什么想看的可以去github看源码，这也是我的学习笔记，发现svg制作复杂的自定义view真的是摔锅神器啊，开玩笑，是大大加快了开发效率。。。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> SVG </tag>
            
            <tag> 自定义view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UI事件传递</title>
      <link href="/2017/05/08/UI%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92/"/>
      <url>/2017/05/08/UI%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h2 id="一些事件传递机制的结论"><a href="#一些事件传递机制的结论" class="headerlink" title="一些事件传递机制的结论"></a>一些事件传递机制的结论</h2><p>事件传递伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">consume</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">        consume = onTouchEvent(ev);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        consume = child.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> consume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ol><li>一个时间序列是指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束。</li><li>正常情况下，一个事件序列只能被一个view拦截且消耗。但可以通过特殊手段做到，比如一个view将本该自己处理的事件通过<code>onTouchEvent</code>强行传递给其他View处理。</li><li>某个view一旦决定拦截，那么这一个事件序列都只能由这个view来处理（如果这个事件序列可以传递给他的话），并且它的<code>onInterceptTouchEvent</code> 不会再被调用。</li><li>某个view一旦开始处理事件，如果他不消耗<strong>ACTION_DOWN</strong> 事件(<code>onTouchEvent</code>返回了false)，那么同一事件序列中的其他事件都不会在交给他来处理，并且事件将重新交由它的父元素去处理，即父元素的<code>onTouchEvent</code>会被调用。意思是事件一旦交给一个view处理，那么他必须消耗掉，否则同一事件序列中剩下的事件就不再交给他处理了。</li><li>如果View 不消耗除 <strong>ACTION_DOWN</strong>以外的其他事件，那么这个点击事件会消失，此时父元素的<code>onTouchEvent</code>并不会调用,并且当前View可以持续收到后续的事件，最终这些消失的点击事件会传递给Activity处理。</li><li>ViewGroup默认不拦截任何事件。</li><li>View 没有<code>onInterceptTouchEvent</code>方法，一旦有事件传递给他，那么它的onTouchEvent方法就会被调用。</li><li>View的<code>onTouchEvent</code>默认都会消耗事件（返回true），除非它是不可点击的(clickable和longClickable 同时为false)。</li><li>View的enable属性不影响<code>onTouchEvent</code>的默认返回值。哪怕一个view是disable状态的，只要他的clickable或者longClickable有一个为true，那么它的onTouchEvent就返回true。</li><li>onClick会发生的前提是当前view是可点击的，并且他收到了down和up事件。</li><li>事件传递过程是由外向内的，即事件总是先传递给父元素，然后在由父元素分发给子View，通过<code>requestDisallowInterceptTouchEvent</code>可以在子元素中干预父元素的事件分发过程，但是ACTION_DOWN除外。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> UI事件传递 </tag>
            
            <tag> android开发艺术探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg知识点</title>
      <link href="/2017/05/04/ffmpeg%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8Cwin%E7%BC%96%E8%AF%91/"/>
      <url>/2017/05/04/ffmpeg%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8Cwin%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>libavcodec: 用于各种类型声音&#x2F;图像编解码<br>libavutil:  包含一些公共的工具函数<br>libavformat:  包含多种多媒体容器格式的封装丶解封装工具<br>libswscale:  用于视频场景的比例缩放丶色彩映射转换<br>libpostproc:  用于后期效果处理<br>libavdevice:  用于音视频数据采集和渲染等功能的设备相关<br>ibswresample:  用于音频重采样和格式转换等功能<br>libavfilter:  包含多媒体处理常用的滤镜功能</p></blockquote><span id="more"></span><p>ffmpeg的官方网站是：<a href="http://ffmpeg.org/">http://ffmpeg.org/</a><br>编译好的windows可用版本的下载地址（和官网保持同步）：<a href="http://ffmpeg.zeranoe.com/builds/">http://ffmpeg.zeranoe.com/builds/</a></p><p>该网站中的FFMPEG分为3个版本：<em>Static，Shared，Dev</em>。</p><p>前两个版本都可以直接在命令行使用：</p><blockquote><p><strong>Static</strong>：只有3个应用程序：ffmpeg.exe,ffplay.exe,ffprobe.exe。每个exe的体积都很大，相关的Dll都已经被编译到exe里面去了。<br><strong>Shared</strong> : 除了上面那三个exe之外，还有一些Dll，比如avcodec-54.dll之类的。shared里面的exe体积很小，他们运行时到相应的Dll中调用功能。<br><strong>Dev</strong> : 用于开发，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不包含exe文件。</p></blockquote><p><strong>ffmpeg</strong> :该项目提供的一个工具，可用于格式转换丶解码或电视卡即时编译等。<br><strong>ffprobe</strong> : ffprobe是用于查看文件格式的应用程序。<br><strong>ffplay</strong> ：是一个简单的播放器，使用ffmpeg库解析和解码，通过SDL显示<br><strong>ffserver</strong> ：一个HTTP多媒体即时广播串流服务器。</p><h2 id="常用命令集"><a href="#常用命令集" class="headerlink" title="常用命令集"></a>常用命令集</h2><ol><li><p><strong>获取视频的信息</strong><br>ffmpeg -i video.avi</p></li><li><p><strong>将图片序列合成视频</strong><br>ffmpeg -f image2 -i image%d.jpg video.mpg<br>上面的命令会把当前目录下的图片（名字如：image1.jpg, image2.jpg等..）合成video.mpg</p></li><li><p><strong>将视频分解成图片序列</strong><br>ffmpeg -i video.mpg image%d.jpg<br>上面的命令会生成image1.jpg,image2.jpg…<br>支持的图片格式有：PGM,PPM,PAM,PGMYUV,JPEG,GIF,PNG,TIFF,SGI</p></li><li><p><strong>为视频重新编码以适合在ipod&#x2F;iphone上播放</strong><br>ffmpeg -i source_video.avi input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X final_video.mp4<br>说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 源视频：source_vidro.avi</span><br><span class="line">- 音频编码：aac</span><br><span class="line">- 音频位率：128kb/s</span><br><span class="line">- 视频编码：mpeg4</span><br><span class="line">- 视频位率：1200kb/s</span><br><span class="line">- 视频尺寸：320 X 180</span><br><span class="line">- 生成的视频：final_video.mp4</span><br></pre></td></tr></table></figure></li><li><p><strong>为视频重新编码以适合在PSP上播放</strong><br>ffmpeg -i source_video.avi -b 300 -s 320x240 -vcodec xvid -ab 32 -ar 24000 -acodec aac final_video.np4<br>说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ 源视频：source_video.avi</span><br><span class="line">+ 音频编码：aac</span><br><span class="line">+ 音频位率：32kb/s</span><br><span class="line">+ 视频编码：xvid</span><br><span class="line">+ 视频位率：1200kb/s</span><br><span class="line">+ 视频尺寸：320 X 180</span><br><span class="line">+ 生成的视频：final_video.mp4</span><br></pre></td></tr></table></figure></li><li><p><strong>从视频抽出声音。并存为Mp3</strong><br>ffmpeg -i source_video.avi -vn -ar44100 -ac 2 -ab 192 -f mp3 sound.mp3<br>说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 源视频：source_video.avi</span><br><span class="line">* 音频位率：192kb/s</span><br><span class="line">* 输出格式：mp3</span><br><span class="line">* 生成的声音：sound.mp3</span><br></pre></td></tr></table></figure></li><li><p><strong>将wav文件转成Mp3</strong><br>ffmpeg -i son_origine.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 son_final.mp3</p></li><li><p><strong>将.avi视频转成.mpg</strong><br>ffmpeg -i video_origine.avi video_finale.mpg</p></li><li><p><strong>将.mpg转成.avi</strong><br>ffmpeg -i video_origine.mpg video_finale.avi</p></li><li><p><strong>将.avi转成gif动画（未压缩）</strong><br>ffmpeg -i video_origine.avi gif_anime.gif</p></li><li><p><strong>合成视频和音频</strong><br>ffmpeg -i son.wav -i video_origine.avi video_finale.mpg</p></li><li><p><strong>将.avi转成.flv</strong><br>ffmpeg -i video_origine.avi -ab 56 -ar 44100 -b 200 -r 15 -s 320x240 -f flv video_finale.flv</p></li><li><p><strong>将.avi转成dv</strong><br>ffmpeg -i video_origine.avi -s pal -r pal -aspect 4:3 -ar 48000 -ac 2 video_finale.dv<br>或<br>ffmpeg -i video_origine.avi -target pal-dv video_finale.dv</p></li><li><p><strong>将.avi压缩成divx</strong><br>ffmpeg -i video_origine.avi -s 320x240 -vcodec msmpeg4v2 video_finale.avi</p></li><li><p><strong>将Ogg Theora 压缩成Mpeg dvd</strong><br>ffmpeg -i film_sortie_cinelerra.ogm -s 720x576 -vcodec mpeg2video -acodec mp3 film_terminate.mpg</p></li><li><p><strong>将.avi压缩成SVCD mpeg2</strong><br>NTSC格式：<br>ffmpeg -i video_origine.avi -target ntsc-svcd video_finale.mpg<br>PAL格式：<br>ffmpeg -i video_origine.avi -target pal-svcd video_finale.mpg</p></li><li><p><strong>将.avi压缩成VCD mpeg2</strong><br>NTSC格式：<br>ffmpeg -i video_origine.avi -target ntsc-vcd video_finale.mpg<br>PAL格式：<br>ffmpeg -i video_origine.avi -traget pal-vcd video_finale.mpg</p></li><li><p><strong>多通道编码</strong><br>ffmpeg -i fichierentree -pass 2 -passlogfile ffmpeg2pass fichiersortie-2</p></li><li><p><strong>从flv提取mp3</strong><br>ffmpeg -i source.flv -ab 128k dest.mp3</p></li></ol><p>##win下编译ffmpeg3.3</p><blockquote><ol><li>下载安装MinGW</li><li>下载yasm</li><li>ffmpeg</li></ol></blockquote><ol><li><strong>编辑ffmpeg文件夹下面的configure文件，找到</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">&#x27;$(SLIBNAME).$(LIBMAJOR)&#x27;</span></span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">&#x27;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&#x27;</span></span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">&#x27;$(SLIBNAME_WITH_VERSION)&#x27;</span></span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">&#x27;$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)&#x27;</span></span><br><span class="line">将其修改成：</span><br><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">&#x27;$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)&#x27;</span></span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">&#x27;$$(RANLIB) &quot;$(LIBDIR)/$(LIBNAME)&quot;&#x27;</span></span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">&#x27;$(SLIBNAME_WITH_MAJOR)&#x27;</span></span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">&#x27;$(SLIBNAME)&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li><strong>新建build_android.sh文件</strong><br><em>注意</em>：要根据环境配置的前四项，且每行末尾不能有空格。export TMPDIR,NDK,SYSROOT,TOOLCHAIN-cross-prefix 一定有<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">export TMPDIR=&quot;D:\ffmpeg\tmp&quot;</span><br><span class="line">NDK=D:\/sdk\/ndk-bundle</span><br><span class="line">SYSROOT=$NDK/platforms\/android-24\/arch-arm/</span><br><span class="line">TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64</span><br><span class="line">function build_one &#123;</span><br><span class="line">./configure \</span><br><span class="line">     --prefix=$PREFIX \</span><br><span class="line">     --enable-shared \</span><br><span class="line">     --disable-static \</span><br><span class="line">     --disable-doc \</span><br><span class="line">     --disable-ffmpeg \</span><br><span class="line">     --disable-ffplay \</span><br><span class="line">     --disable-ffprobe \</span><br><span class="line">     --disable-ffserver \</span><br><span class="line">     --disable-avdevice \</span><br><span class="line">     --disable-doc \</span><br><span class="line">     --disable-symver \</span><br><span class="line">     --cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \</span><br><span class="line">     --target-os=linux \</span><br><span class="line">     --arch=arm \</span><br><span class="line">     --enable-cross-compile \</span><br><span class="line">     --sysroot=$SYSROOT \</span><br><span class="line">     --extra-cflags=&quot;-Os -fpic $ADDI_CFLAGS&quot; \</span><br><span class="line">     --extra-ldflags=&quot;$ADDI_LDFLAGS&quot; \</span><br><span class="line">     $ADDITIONAL_CONFIGURE_FLAG</span><br><span class="line">     make clean</span><br><span class="line">     make</span><br><span class="line">     make install</span><br><span class="line"> &#125;</span><br><span class="line"> CPU=arm</span><br><span class="line"> PREFIX=$(pwd)/android/$CPU</span><br><span class="line"> ADDI_CFLAGS=&quot;-marm&quot;</span><br><span class="line"> build_one</span><br></pre></td></tr></table></figure></li></ol><p>然后在MinGW中cd进ffmpeg目录。<br>命令：</p><blockquote><p>chomd 777 .&#x2F;build_android.sh<br>.&#x2F;build_android.sh 开始编译</p></blockquote><p>编译完成后在FFmpeg下会多一个Android文件夹。</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现arraylist和hashmap</title>
      <link href="/2017/05/02/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0arraylist%E5%92%8Chashmap/"/>
      <url>/2017/05/02/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0arraylist%E5%92%8Chashmap/</url>
      
        <content type="html"><![CDATA[<pre><code>这是第一篇博客，我准备先将最近学习的笔记记录下来，数据结构最基础也最难吧，大佬就别看了。。。</code></pre><hr><ol><li><p>Arraylist</p><pre><code> public class LouisArraylist&lt;E&gt; &#123; int size; Object[] array; private static final int MIN_CAPACITY_INCREMENT = 12; public LouisArraylist(int capacity)&#123;     if(capacity&lt;0)&#123;     throw new IllegalArgumentException(); &#125;     array = new Object[capacity]; &#125; public LouisArraylist()&#123;     array = new Object[0]; &#125; public LouisArraylist(Collection&lt;? extends E&gt; collection)&#123;     Object[] a = collection.toArray();     if(a.getClass()!=Object[].class)&#123;         Object[] newArray = new Object[a.length];         System.arraycopy(a, 0, newArray, 0, a.length);         a = newArray;     &#125;     array = a;     size = a.length; &#125; /**  * 扩容 *  */ private static int newCapacity(int currentCapacity)&#123;     int increment =   (currentCapacity&lt;MIN_CAPACITY_INCREMENT/2)?MIN_CAPACITY_INCREMENT             :currentCapacity&gt;&gt;1;     return currentCapacity+increment; &#125; /** * 增加 */ public boolean add(E object)&#123;     Object[] a = array;     int s = size;     if(s == a.length)&#123;         //需要扩容了         Object[] newArray = new Object[newCapacity(s)];         System.arraycopy(a, 0, newArray, 0, s);         array = a = newArray;     &#125;     a[s] = object;     size = s + 1;     return true; &#125;</code></pre></li></ol><span id="more"></span><pre><code>    public int size()&#123;        return size;    &#125;    public boolean isEmpty()&#123;        return size==0;    &#125;    /**    * 查找首次出现元素的下标    */    public int indexOf(Object object)&#123;        Object[] a = array;        int s = size;        if(object!=null)&#123;            for(int i = 0;i&lt;s;i++)&#123;                if(object.equals(a[i]))&#123;                    return i;                &#125;            &#125;        &#125;else&#123;            for(int i = 0;i&lt;s;i++)&#123;                if(a[i] == null)&#123;                    return i;                &#125;            &#125;        &#125;        return -1;    &#125;    public int lastIndexOf(Object object)&#123;        Object[] a = array;        int s = size;        if(object!=null)&#123;            for(int i = s -1;i &gt;= 0;i--)&#123;                if(object.equals(a[i]))&#123;                    return i;                &#125;            &#125;        &#125;else&#123;            for(int i = s -1;i &gt;= 0;i--)&#123;                if(a[i] == null)&#123;                    return i;                &#125;            &#125;           &#125;        return -1;    &#125;    /**     * 删除某个元素    */    public E remove(int index)&#123;        Object [] a = array;        int s = size;        if(index &gt;= s)&#123;            throw new IndexOutOfBoundsException();        &#125;        E e = (E) a[index];        System.arraycopy(a, index+1, a, index, --s-index);        a[s] = null;        size = s;        return e;    &#125;    /**     * 删除某个元素    */    public boolean remove(Object object)&#123;        Object[] a = array;        int s = size;        if (object == null) &#123;            for (int i = 0; i &lt; size; i++) &#123;                if (a[i] == null) &#123;                    remove(i);                    return true;                &#125;            &#125;        &#125; else &#123;            for (int i = 0; i &lt; size; i++) &#123;                if (a[i].equals(object)) &#123;                    remove(i);                    return true;                &#125;            &#125;        &#125;        return false;    &#125;    public E set(int index,E object)&#123;        Object[] a = array;        if(index&gt;size)&#123;            throw new IndexOutOfBoundsException();        &#125;        E e = (E) a[index];        a[index] = object;        return e;    &#125;    /**    * 获取    */    public E get(int index)&#123;        Object[] a = array;        if(index&gt;size)&#123;            throw new IndexOutOfBoundsException();        &#125;        E e = (E) a[index];        return e;    &#125;&#125;</code></pre><p><strong>代码已经说明的很清楚了，我就不多说什么了，知道底层是数组实现就ok了</strong></p><ol start="2"><li>HashMap</li></ol><p>public class LouisHashMap&lt;K, V&gt; {</p><pre><code>private int size;private static final int MINIMUN_CAPACITY = 1 &lt;&lt; 2;private static final int MAXNIMUN_CAPACITY = 1 &lt;&lt; 30;//阈值private int threshhold;//用于强制扩容,因为比minimun还小private static final Map.Entry[] EMPTY_TABLE = new LouisEntry[MINIMUN_CAPACITY &gt;&gt; 1];private LouisEntry&lt;K, V&gt;[] table; //核心数组LouisEntry&lt;K, V&gt; entryOrNullKey;  //空键entrypublic LouisHashMap() &#123;    table = (LouisEntry&lt;K, V&gt;[]) EMPTY_TABLE;    threshhold = -1;&#125;public LouisHashMap(int capacity) &#123;    if (capacity &lt; 0) &#123;        throw new IllegalArgumentException(&quot;capacity :&quot; + capacity);    &#125; else if (capacity == 0) &#123;        table = (LouisEntry&lt;K, V&gt;[]) EMPTY_TABLE;        threshhold = -1;        return;    &#125; else if (capacity &lt; MINIMUN_CAPACITY &amp;&amp; capacity &gt; 0)&#123;        capacity = MINIMUN_CAPACITY;    &#125; else if (capacity &gt; MAXNIMUN_CAPACITY) &#123;        capacity = MAXNIMUN_CAPACITY;    &#125; else &#123;        capacity = roundUpToPowerOfTwo(capacity);    &#125;    makeTable(capacity);&#125;/** * 添加 * @param key * @param value * @return */public V put(K key, V value) &#123;    if (key == null) &#123;        return putValueForNullKey(value);    &#125;    int hash = sencondaryHash(key.hashCode());    LouisEntry&lt;K, V&gt;[] tab = table;    //将一个很散列的值 位与一个索引大小，会取得0~索引的值    int index = hash &amp; (table.length - 1);    //先检查是否存在相同的键    for (LouisEntry&lt;K, V&gt; e = tab[index]; e != null; e = e.next) &#123;        //键相同hash值一定相同， hash相同键不一定相同        if (e.hash == hash &amp;&amp; key.equals(e.getKey())) &#123;            V oldValue = e.getValue();            e.setValue(value);            return oldValue;        &#125;    &#125;    //没有覆盖直接插入元素    if (size++ &gt; threshhold) &#123;        //创建一个新的容量的数组        tab = doubleCapacity();        index = hash &amp; (tab.length - 1);    &#125;    addNewEntry(key, value, hash, index);    return null;&#125;private void addNewEntry(K key, V value, int hash, int index) &#123;    //将新创建的entry加在链表头，一句代码解决两个事情，放头部，放容易查询也容易    table[index] = new LouisEntry&lt;&gt;(key, value, hash, table[index]);&#125;/** * get * @return */public V get(Object key) &#123;    if (key == null) &#123;        LouisEntry&lt;K, V&gt; e = entryOrNullKey;        return e == null ? null : e.getValue();    &#125;    int hash = sencondaryHash(key.hashCode());    LouisEntry&lt;K, V&gt;[] tab = table;    int index = hash &amp; (tab.length - 1);    for (LouisEntry&lt;K, V&gt; entry = tab[index]; entry != null; entry = entry.next) &#123;        K ekey = entry.key;        //比较时，先比较对象值是否相等，在比较属性值是否相等，增加效率       if (ekey == key || (entry.hash == hash &amp;&amp; key.equals(ekey))) &#123;           return entry.value;       &#125;    &#125;    return null;&#125;/** * 双倍扩容 * @return */private LouisEntry&lt;K, V&gt;[] doubleCapacity() &#123;    LouisEntry&lt;K, V&gt;[] oldTable = table;    int oldCapacity = oldTable.length;    if (oldCapacity == MAXNIMUN_CAPACITY) &#123;        return oldTable;    &#125;    //2的幂次方    int newCapacity = oldCapacity &lt;&lt; 1;    System.out.println(&quot;扩容：&quot; + size);    LouisEntry&lt;K, V&gt;[] newTable = makeTable(newCapacity);    if (size == 0) &#123;        return newTable;    &#125;    //开始重新散列    for (int j = 0; j &lt; oldTable.length; j++) &#123;        LouisEntry&lt;K, V&gt; e = oldTable[j]; //拿到每个键值对        if (e == null) &#123;            continue; //因为每个索引不一定有值，hash        &#125;        // 与上面   int index = hash &amp; (table.length - 1);会出现两组数据，一种还在远处，一种去到length的位置        int highBit = e.hash &amp; oldCapacity;        LouisEntry&lt;K, V&gt; broken = null;        //位或 运算最多是原值的两倍，重新一次散列        newTable[j | highBit] = e;        for (LouisEntry&lt;K, V&gt; n = e.next; n != null; e = n, n = n.next) &#123;            //n 为当前遍历的元素， e为前一个            int nextHighBit = n.hash &amp; oldCapacity;            if (nextHighBit != highBit) &#123;                if (broken == null) &#123;                    int nextNewIndex = j | nextHighBit; //新的索引的位置                    newTable[nextNewIndex] = n;                &#125; else &#123;                    broken.next = n;                &#125;                broken = e;                highBit = nextHighBit;            &#125;        &#125;        if (broken != null) &#123;            broken.next = null;        &#125;    &#125;    return newTable;&#125;/** * hashMap键的hash算法 * @param h * @return */private int sencondaryHash(int h) &#123;    h ^= (h&gt;&gt;&gt;20)^(h&gt;&gt;&gt;12);    return h^(h&gt;&gt;&gt;7)^(h&gt;&gt;&gt;4);&#125;/** * 放空键的键值对 * @param value * @return */private V putValueForNullKey(V value) &#123;    LouisEntry&lt;K, V&gt; entry = entryOrNullKey;    if (entry == null) &#123;        addNewEntryForNullKey(value);        size++;        return null;    &#125; else&#123;        V oldValue = entry.getValue();        entry.setValue(value);        return oldValue;    &#125;&#125;private void addNewEntryForNullKey(V value) &#123;    entryOrNullKey = new LouisEntry&lt;K, V&gt;(null, value, 0, null);&#125;/** * 根据容量创建核心数组 * @param capacity */private LouisEntry&lt;K, V&gt;[] makeTable(int capacity) &#123;    LouisEntry&lt;K, V&gt;[] newTable = new LouisEntry[capacity];    table = newTable;    threshhold = (capacity &gt;&gt;&gt; 2) + (capacity &gt;&gt;&gt; 1);    return newTable;&#125;private int roundUpToPowerOfTwo(int i) &#123;    i--;    i |= i &gt;&gt;&gt; 1; //  i = i | (i &gt;&gt;&gt; 1) 让所有的位都变成 1 ， 最后在加 1，就可以被2整除    i |= i &gt;&gt;&gt; 2;    i |= i &gt;&gt;&gt; 4;    i |= i &gt;&gt;&gt; 8;    i |= i &gt;&gt;&gt; 16;    return i + 1;&#125;public int getSize() &#123;    return size;&#125;/** * 键值对类 * @param &lt;K&gt; * @param &lt;V&gt; */static class LouisEntry&lt;K, V&gt; implements Map.Entry&lt;K, V&gt; &#123;    final int hash;    final K key;    //此处用final 只赋值一次，因为key是唯一的    V value;    LouisEntry&lt;K, V&gt; next;    public LouisEntry(K key, V value, int hash, LouisEntry&lt;K, V&gt; next) &#123;        this.key = key;        this.value = value;        this.hash = hash;        this.next = next;    &#125;    @Override    public K getKey() &#123;        return key;    &#125;    @Override    public V getValue() &#123;        return value;    &#125;    @Override    public V setValue(V value) &#123;        V oldValue = this.value;        this.value = value;        return oldValue;    &#125;    @Override    public int hashCode() &#123;        // ^ 异或运算使结果更加散列，相同为0        return (key == null ? 0 :key.hashCode()) ^ (value == null ? 0 : value.hashCode());    &#125;&#125;</code></pre><p>}</p><p><strong>第一次写博客，注释也很多了，兄弟们自己将就看吧。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
